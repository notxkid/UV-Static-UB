eval(atob("aWYgKCFzZWxmLl9fdXYpIHsNCiAgICBfX3V2SG9vayhzZWxmLCBzZWxmLl9fdXYkY29uZmlnLCBzZWxmLl9fdXYkY29uZmlnLmJhcmUpOw0KfTsNCg0KYXN5bmMgZnVuY3Rpb24gX191dkhvb2sod2luZG93LCBjb25maWcgPSB7fSwgYmFyZSA9ICcvYmFyZS8nKSB7DQogICAgaWYgKCdfX3V2JyBpbiB3aW5kb3cgJiYgd2luZG93Ll9fdXYgaW5zdGFuY2VvZiBVbHRyYXZpb2xldCkgcmV0dXJuIGZhbHNlOw0KDQogICAgaWYgKHdpbmRvdy5kb2N1bWVudCAmJiAhIXdpbmRvdy53aW5kb3cpIHsNCiAgICAgICAgd2luZG93LmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoInNjcmlwdFtfX3V2LXNjcmlwdF0iKS5mb3JFYWNoKG5vZGUgPT4gbm9kZS5yZW1vdmUoKSkNCiAgICB9Ow0KDQogICAgY29uc3Qgd29ya2VyID0gIXdpbmRvdy53aW5kb3c7DQogICAgY29uc3QgbWFzdGVyID0gJ19fdXYnOw0KICAgIGNvbnN0IG1ldGhvZFByZWZpeCA9ICdfX3V2JCc7DQogICAgY29uc3QgX191diA9IG5ldyBVbHRyYXZpb2xldCh7DQogICAgICAgIC4uLmNvbmZpZywNCiAgICAgICAgd2luZG93LA0KICAgIH0pOw0KDQogICAgaWYgKHR5cGVvZiBjb25maWcuY29uc3RydWN0ID09PSAnZnVuY3Rpb24nKSB7DQogICAgICAgIGNvbmZpZy5jb25zdHJ1Y3QoX191diwgd29ya2VyID8gJ3dvcmtlcicgOiAnd2luZG93Jyk7DQogICAgfTsNCg0KICAgIGNvbnN0IHsgY2xpZW50IH0gPSBfX3V2Ow0KICAgIGNvbnN0IHsNCiAgICAgICAgSFRNTE1lZGlhRWxlbWVudCwNCiAgICAgICAgSFRNTFNjcmlwdEVsZW1lbnQsDQogICAgICAgIEhUTUxBdWRpb0VsZW1lbnQsDQogICAgICAgIEhUTUxWaWRlb0VsZW1lbnQsDQogICAgICAgIEhUTUxJbnB1dEVsZW1lbnQsDQogICAgICAgIEhUTUxFbWJlZEVsZW1lbnQsDQogICAgICAgIEhUTUxUcmFja0VsZW1lbnQsDQogICAgICAgIEhUTUxBbmNob3JFbGVtZW50LA0KICAgICAgICBIVE1MSUZyYW1lRWxlbWVudCwNCiAgICAgICAgSFRNTEFyZWFFbGVtZW50LA0KICAgICAgICBIVE1MTGlua0VsZW1lbnQsDQogICAgICAgIEhUTUxCYXNlRWxlbWVudCwNCiAgICAgICAgSFRNTEZvcm1FbGVtZW50LA0KICAgICAgICBIVE1MSW1hZ2VFbGVtZW50LA0KICAgICAgICBIVE1MU291cmNlRWxlbWVudCwNCiAgICB9ID0gd2luZG93Ow0KDQogICAgY2xpZW50Lm5hdGl2ZU1ldGhvZHMuZGVmaW5lUHJvcGVydHkod2luZG93LCAnX191dicsIHsNCiAgICAgICAgdmFsdWU6IF9fdXYsDQogICAgICAgIGVudW1lcmFibGU6IGZhbHNlLA0KICAgIH0pOw0KDQoNCiAgICBfX3V2Lm1ldGEub3JpZ2luID0gbG9jYXRpb24ub3JpZ2luOw0KICAgIF9fdXYubG9jYXRpb24gPSBjbGllbnQubG9jYXRpb24uZW11bGF0ZSgNCiAgICAgICAgKGhyZWYpID0+IHsNCiAgICAgICAgICAgIGlmIChocmVmID09PSAnYWJvdXQ6c3JjZG9jJykgcmV0dXJuIG5ldyBVUkwoaHJlZik7DQogICAgICAgICAgICBpZiAoaHJlZi5zdGFydHNXaXRoKCdibG9iOicpKSBocmVmID0gaHJlZi5zbGljZSgnYmxvYjonLmxlbmd0aCk7DQogICAgICAgICAgICByZXR1cm4gbmV3IFVSTChfX3V2LnNvdXJjZVVybChocmVmKSk7DQogICAgICAgIH0sDQogICAgICAgIChocmVmKSA9PiB7DQogICAgICAgICAgICByZXR1cm4gX191di5yZXdyaXRlVXJsKGhyZWYpOw0KICAgICAgICB9LA0KICAgICk7DQoNCiAgICBfX3V2LmNvb2tpZVN0ciA9IHdpbmRvdy5fX3V2JGNvb2tpZXMgfHwgJyc7DQogICAgX191di5tZXRhLnVybCA9IF9fdXYubG9jYXRpb247DQogICAgX191di5kb21haW4gPSBfX3V2Lm1ldGEudXJsLmhvc3Q7DQogICAgX191di5ibG9iVXJscyA9IG5ldyB3aW5kb3cuTWFwKCk7DQogICAgX191di5yZWZlcnJlciA9ICcnOw0KICAgIF9fdXYuY29va2llcyA9IFtdOw0KICAgIF9fdXYubG9jYWxTdG9yYWdlT2JqID0ge307DQogICAgX191di5zZXNzaW9uU3RvcmFnZU9iaiA9IHt9Ow0KDQogICAgdHJ5IHsNCiAgICAgICAgX191di5iYXJlID0gbmV3IFVSTChiYXJlLCB3aW5kb3cubG9jYXRpb24uaHJlZik7DQogICAgfSBjYXRjaChlKSB7DQogICAgICAgIF9fdXYuYmFyZSA9IHdpbmRvdy5wYXJlbnQuX191di5iYXJlOw0KICAgIH07DQoNCiAgICBpZiAoX191di5sb2NhdGlvbi5ocmVmID09PSAnYWJvdXQ6c3JjZG9jJykgew0KICAgICAgICBfX3V2Lm1ldGEgPSB3aW5kb3cucGFyZW50Ll9fdXYubWV0YTsNCiAgICB9Ow0KDQogICAgaWYgKHdpbmRvdy5FdmVudFRhcmdldCkgew0KICAgICAgICBfX3V2LmFkZEV2ZW50TGlzdGVuZXIgPSB3aW5kb3cuRXZlbnRUYXJnZXQucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXI7DQogICAgICAgIF9fdXYucmVtb3ZlTGlzdGVuZXIgPSB3aW5kb3cuRXZlbnRUYXJnZXQucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyOw0KICAgICAgICBfX3V2LmRpc3BhdGNoRXZlbnQgPSB3aW5kb3cuRXZlbnRUYXJnZXQucHJvdG90eXBlLmRpc3BhdGNoRXZlbnQ7DQogICAgfTsNCg0KICAgIC8vIFN0b3JhZ2Ugd3JhcHBlcnMNCiAgICBjbGllbnQubmF0aXZlTWV0aG9kcy5kZWZpbmVQcm9wZXJ0eShjbGllbnQuc3RvcmFnZS5zdG9yZVByb3RvLCAnX191diRzdG9yYWdlT2JqJywgew0KICAgICAgICBnZXQoKSB7DQogICAgICAgICAgICBpZiAodGhpcyA9PT0gY2xpZW50LnN0b3JhZ2Uuc2Vzc2lvblN0b3JhZ2UpIHJldHVybiBfX3V2LnNlc3Npb25TdG9yYWdlT2JqOw0KICAgICAgICAgICAgaWYgKHRoaXMgPT09IGNsaWVudC5zdG9yYWdlLmxvY2FsU3RvcmFnZSkgcmV0dXJuIF9fdXYubG9jYWxTdG9yYWdlT2JqOw0KICAgICAgICB9LA0KICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSwNCiAgICB9KTsNCg0KICAgIGlmICh3aW5kb3cubG9jYWxTdG9yYWdlKSB7DQogICAgICAgIGZvciAoY29uc3Qga2V5IGluIHdpbmRvdy5sb2NhbFN0b3JhZ2UpIHsNCiAgICAgICAgICAgIGlmIChrZXkuc3RhcnRzV2l0aChtZXRob2RQcmVmaXggKyBfX3V2LmxvY2F0aW9uLm9yaWdpbiArICdAJykpIHsNCiAgICAgICAgICAgICAgICBfX3V2LmxvY2FsU3RvcmFnZU9ialtrZXkuc2xpY2UoKG1ldGhvZFByZWZpeCArIF9fdXYubG9jYXRpb24ub3JpZ2luICsgJ0AnKS5sZW5ndGgpXSA9IHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShrZXkpOw0KICAgICAgICAgICAgfTsNCiAgICAgICAgfTsNCg0KICAgICAgICBfX3V2LmxzV3JhcCA9IGNsaWVudC5zdG9yYWdlLmVtdWxhdGUoY2xpZW50LnN0b3JhZ2UubG9jYWxTdG9yYWdlLCBfX3V2LmxvY2FsU3RvcmFnZU9iaik7DQogICAgfTsNCg0KICAgIGlmICh3aW5kb3cuc2Vzc2lvblN0b3JhZ2UpIHsNCiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gd2luZG93LnNlc3Npb25TdG9yYWdlKSB7DQogICAgICAgICAgICBpZiAoa2V5LnN0YXJ0c1dpdGgobWV0aG9kUHJlZml4ICsgX191di5sb2NhdGlvbi5vcmlnaW4gKyAnQCcpKSB7DQogICAgICAgICAgICAgICAgX191di5zZXNzaW9uU3RvcmFnZU9ialtrZXkuc2xpY2UoKG1ldGhvZFByZWZpeCArIF9fdXYubG9jYXRpb24ub3JpZ2luICsgJ0AnKS5sZW5ndGgpXSA9IHdpbmRvdy5zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKGtleSk7DQogICAgICAgICAgICB9Ow0KICAgICAgICB9Ow0KDQogICAgICAgIF9fdXYuc3NXcmFwID0gY2xpZW50LnN0b3JhZ2UuZW11bGF0ZShjbGllbnQuc3RvcmFnZS5zZXNzaW9uU3RvcmFnZSwgX191di5zZXNzaW9uU3RvcmFnZU9iaik7DQogICAgfTsNCg0KDQoNCiAgICBsZXQgcmF3QmFzZSA9IHdpbmRvdy5kb2N1bWVudCA/IGNsaWVudC5ub2RlLmJhc2VVUkkuZ2V0LmNhbGwod2luZG93LmRvY3VtZW50KSA6IHdpbmRvdy5sb2NhdGlvbi5ocmVmOw0KICAgIGxldCBiYXNlID0gX191di5zb3VyY2VVcmwocmF3QmFzZSk7DQoNCiAgICBjbGllbnQubmF0aXZlTWV0aG9kcy5kZWZpbmVQcm9wZXJ0eShfX3V2Lm1ldGEsICdiYXNlJywgew0KICAgICAgICBnZXQoKSB7DQogICAgICAgICAgICBpZiAoIXdpbmRvdy5kb2N1bWVudCkgcmV0dXJuIF9fdXYubWV0YS51cmwuaHJlZjsNCg0KICAgICAgICAgICAgaWYgKGNsaWVudC5ub2RlLmJhc2VVUkkuZ2V0LmNhbGwod2luZG93LmRvY3VtZW50KSAhPT0gcmF3QmFzZSkgew0KICAgICAgICAgICAgICAgIHJhd0Jhc2UgPSBjbGllbnQubm9kZS5iYXNlVVJJLmdldC5jYWxsKHdpbmRvdy5kb2N1bWVudCk7DQogICAgICAgICAgICAgICAgYmFzZSA9IF9fdXYuc291cmNlVXJsKHJhd0Jhc2UpOw0KICAgICAgICAgICAgfTsNCg0KICAgICAgICAgICAgcmV0dXJuIGJhc2U7DQogICAgICAgIH0sDQogICAgfSk7DQoNCg0KICAgIF9fdXYubWV0aG9kcyA9IHsNCiAgICAgICAgc2V0U291cmNlOiBtZXRob2RQcmVmaXggKyAnc2V0U291cmNlJywNCiAgICAgICAgc291cmNlOiBtZXRob2RQcmVmaXggKyAnc291cmNlJywNCiAgICAgICAgbG9jYXRpb246IG1ldGhvZFByZWZpeCArICdsb2NhdGlvbicsDQogICAgICAgIGZ1bmN0aW9uOiBtZXRob2RQcmVmaXggKyAnZnVuY3Rpb24nLA0KICAgICAgICBzdHJpbmc6IG1ldGhvZFByZWZpeCArICdzdHJpbmcnLA0KICAgICAgICBldmFsOiBtZXRob2RQcmVmaXggKyAnZXZhbCcsDQogICAgICAgIHBhcmVudDogbWV0aG9kUHJlZml4ICsgJ3BhcmVudCcsDQogICAgICAgIHRvcDogbWV0aG9kUHJlZml4ICsgJ3RvcCcsDQogICAgfTsNCg0KICAgIF9fdXYuZmlsdGVyS2V5cyA9IFsNCiAgICAgICAgbWFzdGVyLA0KICAgICAgICBfX3V2Lm1ldGhvZHMuc2V0U291cmNlLA0KICAgICAgICBfX3V2Lm1ldGhvZHMuc291cmNlLA0KICAgICAgICBfX3V2Lm1ldGhvZHMubG9jYXRpb24sDQogICAgICAgIF9fdXYubWV0aG9kcy5mdW5jdGlvbiwNCiAgICAgICAgX191di5tZXRob2RzLnN0cmluZywNCiAgICAgICAgX191di5tZXRob2RzLmV2YWwsDQogICAgICAgIF9fdXYubWV0aG9kcy5wYXJlbnQsDQogICAgICAgIF9fdXYubWV0aG9kcy50b3AsDQogICAgICAgIG1ldGhvZFByZWZpeCArICdwcm90b2NvbCcsDQogICAgICAgIG1ldGhvZFByZWZpeCArICdzdG9yYWdlT2JqJywNCiAgICAgICAgbWV0aG9kUHJlZml4ICsgJ3VybCcsDQogICAgICAgIG1ldGhvZFByZWZpeCArICdtb2RpZmllZFN0eWxlJywNCiAgICAgICAgbWV0aG9kUHJlZml4ICsgJ2NvbmZpZycsDQogICAgICAgIG1ldGhvZFByZWZpeCArICdkaXNwYXRjaGVkJywNCiAgICAgICAgJ1VsdHJhdmlvbGV0JywNCiAgICAgICAgJ19fdXZIb29rJywNCiAgICBdOw0KDQoNCiAgICBjbGllbnQub24oJ3dyYXAnLCAodGFyZ2V0LCB3cmFwcGVkKSA9PiB7DQogICAgICAgIGNsaWVudC5uYXRpdmVNZXRob2RzLmRlZmluZVByb3BlcnR5KHdyYXBwZWQsICduYW1lJywgY2xpZW50Lm5hdGl2ZU1ldGhvZHMuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgJ25hbWUnKSk7DQogICAgICAgIGNsaWVudC5uYXRpdmVNZXRob2RzLmRlZmluZVByb3BlcnR5KHdyYXBwZWQsICdsZW5ndGgnLCBjbGllbnQubmF0aXZlTWV0aG9kcy5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCAnbGVuZ3RoJykpOw0KDQogICAgICAgIGNsaWVudC5uYXRpdmVNZXRob2RzLmRlZmluZVByb3BlcnR5KHdyYXBwZWQsIF9fdXYubWV0aG9kcy5zdHJpbmcsIHsNCiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLA0KICAgICAgICAgICAgdmFsdWU6IGNsaWVudC5uYXRpdmVNZXRob2RzLmZuVG9TdHJpbmcuY2FsbCh0YXJnZXQpLA0KICAgICAgICB9KTsNCg0KICAgICAgICBjbGllbnQubmF0aXZlTWV0aG9kcy5kZWZpbmVQcm9wZXJ0eSh3cmFwcGVkLCBfX3V2Lm1ldGhvZHMuZnVuY3Rpb24sIHsNCiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLA0KICAgICAgICAgICAgdmFsdWU6IHRhcmdldCwNCiAgICAgICAgfSk7DQogICAgfSk7DQoNCiAgICBjbGllbnQuZmV0Y2gub24oJ3JlcXVlc3QnLCBldmVudCA9PiB7DQogICAgICAgIGV2ZW50LmRhdGEuaW5wdXQgPSBfX3V2LnJld3JpdGVVcmwoZXZlbnQuZGF0YS5pbnB1dCk7DQogICAgfSk7DQoNCiAgICBjbGllbnQuZmV0Y2gub24oJ3JlcXVlc3RVcmwnLCBldmVudCA9PiB7DQogICAgICAgIGV2ZW50LmRhdGEudmFsdWUgPSBfX3V2LnNvdXJjZVVybChldmVudC5kYXRhLnZhbHVlKTsNCiAgICB9KTsNCg0KICAgIGNsaWVudC5mZXRjaC5vbigncmVzcG9uc2VVcmwnLCBldmVudCA9PiB7DQogICAgICAgIGV2ZW50LmRhdGEudmFsdWUgPSBfX3V2LnNvdXJjZVVybChldmVudC5kYXRhLnZhbHVlKTsNCiAgICB9KTsNCg0KICAgIC8vIFhNTEh0dHBSZXF1ZXN0DQogICAgY2xpZW50Lnhoci5vbignb3BlbicsIGV2ZW50ID0+IHsNCiAgICAgICAgZXZlbnQuZGF0YS5pbnB1dCA9IF9fdXYucmV3cml0ZVVybChldmVudC5kYXRhLmlucHV0KTsNCiAgICB9KTsNCg0KICAgIGNsaWVudC54aHIub24oJ3Jlc3BvbnNlVXJsJywgZXZlbnQgPT4gew0KICAgICAgICBldmVudC5kYXRhLnZhbHVlID0gX191di5zb3VyY2VVcmwoZXZlbnQuZGF0YS52YWx1ZSk7DQogICAgfSk7DQoNCg0KICAgIC8vIFdvcmtlcnMNCiAgICBjbGllbnQud29ya2Vycy5vbignd29ya2VyJywgZXZlbnQgPT4gew0KICAgICAgICBldmVudC5kYXRhLnVybCA9IF9fdXYucmV3cml0ZVVybChldmVudC5kYXRhLnVybCk7DQogICAgfSk7DQoNCiAgICBjbGllbnQud29ya2Vycy5vbignYWRkTW9kdWxlJywgZXZlbnQgPT4gew0KICAgICAgICBldmVudC5kYXRhLnVybCA9IF9fdXYucmV3cml0ZVVybChldmVudC5kYXRhLnVybCk7DQogICAgfSk7DQoNCiAgICBjbGllbnQud29ya2Vycy5vbignaW1wb3J0U2NyaXB0cycsIGV2ZW50ID0+IHsNCiAgICAgICAgZm9yIChjb25zdCBpIGluIGV2ZW50LmRhdGEuc2NyaXB0cykgew0KICAgICAgICAgICAgZXZlbnQuZGF0YS5zY3JpcHRzW2ldID0gX191di5yZXdyaXRlVXJsKGV2ZW50LmRhdGEuc2NyaXB0c1tpXSk7DQogICAgICAgIH07DQogICAgfSk7DQoNCiAgICBjbGllbnQud29ya2Vycy5vbigncG9zdE1lc3NhZ2UnLCBldmVudCA9PiB7DQogICAgICAgIGxldCB0byA9IGV2ZW50LmRhdGEub3JpZ2luOw0KDQogICAgICAgIGV2ZW50LmRhdGEub3JpZ2luID0gJyonOw0KICAgICAgICBldmVudC5kYXRhLm1lc3NhZ2UgPSB7DQogICAgICAgICAgICBfX2RhdGE6IGV2ZW50LmRhdGEubWVzc2FnZSwNCiAgICAgICAgICAgIF9fb3JpZ2luOiBfX3V2Lm1ldGEudXJsLm9yaWdpbiwNCiAgICAgICAgICAgIF9fdG86IHRvLA0KICAgICAgICB9Ow0KICAgIH0pOw0KDQogICAgLy8gTmF2aWdhdG9yDQogICAgY2xpZW50Lm5hdmlnYXRvci5vbignc2VuZEJlYWNvbicsIGV2ZW50ID0+IHsNCiAgICAgICAgZXZlbnQuZGF0YS51cmwgPSBfX3V2LnJld3JpdGVVcmwoZXZlbnQuZGF0YS51cmwpOw0KICAgIH0pOw0KDQogICAgLy8gQ29va2llcw0KICAgIGNsaWVudC5kb2N1bWVudC5vbignZ2V0Q29va2llJywgZXZlbnQgPT4gew0KICAgICAgICBldmVudC5kYXRhLnZhbHVlID0gX191di5jb29raWVTdHI7DQogICAgfSk7DQoNCiAgICBjbGllbnQuZG9jdW1lbnQub24oJ3NldENvb2tpZScsIGV2ZW50ID0+IHsNCiAgICAgICAgUHJvbWlzZS5yZXNvbHZlKF9fdXYuY29va2llLnNldENvb2tpZXMoZXZlbnQuZGF0YS52YWx1ZSwgX191di5kYiwgX191di5tZXRhKSkudGhlbigoKSA9PiB7DQogICAgICAgICAgICBfX3V2LmNvb2tpZS5kYigpLnRoZW4oZGIgPT4gew0KICAgICAgICAgICAgICAgIF9fdXYuY29va2llLmdldENvb2tpZXMoZGIpLnRoZW4oY29va2llcyA9PiB7DQogICAgICAgICAgICAgICAgICAgIF9fdXYuY29va2llU3RyID0gX191di5jb29raWUuc2VyaWFsaXplKGNvb2tpZXMsIF9fdXYubWV0YSwgdHJ1ZSk7DQogICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICB9KTsNCiAgICAgICAgfSk7DQogICAgICAgIGNvbnN0IGNvb2tpZSA9IF9fdXYuY29va2llLnNldENvb2tpZShldmVudC5kYXRhLnZhbHVlKVswXTsNCg0KICAgICAgICBpZiAoIWNvb2tpZS5wYXRoKSBjb29raWUucGF0aCA9ICcvJzsNCiAgICAgICAgaWYgKCFjb29raWUuZG9tYWluKSBjb29raWUuZG9tYWluID0gX191di5tZXRhLnVybC5ob3N0bmFtZTsNCg0KICAgICAgICBpZiAoX191di5jb29raWUudmFsaWRhdGVDb29raWUoY29va2llLCBfX3V2Lm1ldGEsIHRydWUpKSB7DQogICAgICAgICAgICBpZiAoX191di5jb29raWVTdHIubGVuZ3RoKSBfX3V2LmNvb2tpZVN0ciArPSAnOyAnOw0KICAgICAgICAgICAgX191di5jb29raWVTdHIgKz0gYCR7Y29va2llLm5hbWV9PSR7Y29va2llLnZhbHVlfWA7DQogICAgICAgIH07DQoNCiAgICAgICAgZXZlbnQucmVzcG9uZFdpdGgoZXZlbnQuZGF0YS52YWx1ZSk7DQogICAgfSk7DQoNCiAgICAvLyBIVE1MDQogICAgY2xpZW50LmVsZW1lbnQub24oJ3NldElubmVySFRNTCcsIGV2ZW50ID0+IHsNCiAgICAgICAgc3dpdGNoIChldmVudC50aGF0LnRhZ05hbWUpIHsNCiAgICAgICAgICAgIGNhc2UgJ1NDUklQVCc6DQogICAgICAgICAgICAgICAgZXZlbnQuZGF0YS52YWx1ZSA9IF9fdXYuanMucmV3cml0ZShldmVudC5kYXRhLnZhbHVlKTsNCiAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgIGNhc2UgJ1NUWUxFJzoNCiAgICAgICAgICAgICAgICBldmVudC5kYXRhLnZhbHVlID0gX191di5yZXdyaXRlQ1NTKGV2ZW50LmRhdGEudmFsdWUpOw0KICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgZGVmYXVsdDoNCiAgICAgICAgICAgICAgICBldmVudC5kYXRhLnZhbHVlID0gX191di5yZXdyaXRlSHRtbChldmVudC5kYXRhLnZhbHVlKTsNCiAgICAgICAgfTsNCiAgICB9KTsNCg0KICAgIGNsaWVudC5lbGVtZW50Lm9uKCdnZXRJbm5lckhUTUwnLCBldmVudCA9PiB7DQogICAgICAgIHN3aXRjaCAoZXZlbnQudGhhdC50YWdOYW1lKSB7DQogICAgICAgICAgICBjYXNlICdTQ1JJUFQnOg0KICAgICAgICAgICAgICAgIGV2ZW50LmRhdGEudmFsdWUgPSBfX3V2LmpzLnNvdXJjZShldmVudC5kYXRhLnZhbHVlKTsNCiAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgIGRlZmF1bHQ6DQogICAgICAgICAgICAgICAgZXZlbnQuZGF0YS52YWx1ZSA9IF9fdXYuc291cmNlSHRtbChldmVudC5kYXRhLnZhbHVlKTsNCiAgICAgICAgfTsNCiAgICB9KTsNCg0KICAgIGNsaWVudC5lbGVtZW50Lm9uKCdzZXRPdXRlckhUTUwnLCBldmVudCA9PiB7DQogICAgICAgIGV2ZW50LmRhdGEudmFsdWUgPSBfX3V2LnJld3JpdGVIdG1sKGV2ZW50LmRhdGEudmFsdWUsIHsgZG9jdW1lbnQ6IGV2ZW50LnRoYXQudGFnTmFtZSA9PT0gJ0hUTUwnIH0pOw0KICAgIH0pOw0KDQogICAgY2xpZW50LmVsZW1lbnQub24oJ2dldE91dGVySFRNTCcsIGV2ZW50ID0+IHsNCiAgICAgICAgc3dpdGNoIChldmVudC50aGF0LnRhZ05hbWUpIHsNCiAgICAgICAgICAgIGNhc2UgJ0hFQUQnOg0KICAgICAgICAgICAgICAgIGV2ZW50LmRhdGEudmFsdWUgPSBfX3V2LnNvdXJjZUh0bWwoDQogICAgICAgICAgICAgICAgICAgIGV2ZW50LmRhdGEudmFsdWUucmVwbGFjZSgvPGhlYWQoLiopPiguKik8XC9oZWFkPi9zLCAnPG9wLWhlYWQkMT4kMjwvb3AtaGVhZD4nKQ0KICAgICAgICAgICAgICAgICkucmVwbGFjZSgvPG9wLWhlYWQoLiopPiguKik8XC9vcC1oZWFkPi9zLCAnPGhlYWQkMT4kMjwvaGVhZD4nKTsNCiAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgIGNhc2UgJ0JPRFknOg0KICAgICAgICAgICAgICAgIGV2ZW50LmRhdGEudmFsdWUgPSBfX3V2LnNvdXJjZUh0bWwoDQogICAgICAgICAgICAgICAgICAgIGV2ZW50LmRhdGEudmFsdWUucmVwbGFjZSgvPGJvZHkoLiopPiguKik8XC9ib2R5Pi9zLCAnPG9wLWJvZHkkMT4kMjwvb3AtYm9keT4nKQ0KICAgICAgICAgICAgICAgICkucmVwbGFjZSgvPG9wLWJvZHkoLiopPiguKik8XC9vcC1ib2R5Pi9zLCAnPGJvZHkkMT4kMjwvYm9keT4nKTsNCiAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgIGRlZmF1bHQ6DQogICAgICAgICAgICAgICAgZXZlbnQuZGF0YS52YWx1ZSA9IF9fdXYuc291cmNlSHRtbChldmVudC5kYXRhLnZhbHVlLCB7IGRvY3VtZW50OiBldmVudC50aGF0LnRhZ05hbWUgPT09ICdIVE1MJyB9KTsNCiAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgfTsNCg0KICAgICAgICAvL2V2ZW50LmRhdGEudmFsdWUgPSBfX3V2LnNvdXJjZUh0bWwoZXZlbnQuZGF0YS52YWx1ZSwgeyBkb2N1bWVudDogZXZlbnQudGhhdC50YWdOYW1lID09PSAnSFRNTCcgfSk7DQogICAgfSk7DQoNCiAgICBjbGllbnQuZG9jdW1lbnQub24oJ3dyaXRlJywgZXZlbnQgPT4gew0KICAgICAgICBpZiAoIWV2ZW50LmRhdGEuaHRtbC5sZW5ndGgpIHJldHVybiBmYWxzZTsNCiAgICAgICAgZXZlbnQuZGF0YS5odG1sID0gW19fdXYucmV3cml0ZUh0bWwoZXZlbnQuZGF0YS5odG1sLmpvaW4oJycpKV07DQogICAgfSk7DQoNCiAgICBjbGllbnQuZG9jdW1lbnQub24oJ3dyaXRlbG4nLCBldmVudCA9PiB7DQogICAgICAgIGlmICghZXZlbnQuZGF0YS5odG1sLmxlbmd0aCkgcmV0dXJuIGZhbHNlOw0KICAgICAgICBldmVudC5kYXRhLmh0bWwgPSBbX191di5yZXdyaXRlSHRtbChldmVudC5kYXRhLmh0bWwuam9pbignJykpXTsNCiAgICB9KTsNCg0KICAgIGNsaWVudC5lbGVtZW50Lm9uKCdpbnNlcnRBZGphY2VudEhUTUwnLCBldmVudCA9PiB7DQogICAgICAgIGV2ZW50LmRhdGEuaHRtbCA9IF9fdXYucmV3cml0ZUh0bWwoZXZlbnQuZGF0YS5odG1sKTsNCiAgICB9KTsNCg0KICAgIC8vIEV2ZW50U291cmNlDQoNCiAgICBjbGllbnQuZXZlbnRTb3VyY2Uub24oJ2NvbnN0cnVjdCcsIGV2ZW50ID0+IHsNCiAgICAgICAgZXZlbnQuZGF0YS51cmwgPSBfX3V2LnJld3JpdGVVcmwoZXZlbnQuZGF0YS51cmwpOw0KICAgIH0pOw0KDQoNCiAgICBjbGllbnQuZXZlbnRTb3VyY2Uub24oJ3VybCcsIGV2ZW50ID0+IHsNCiAgICAgICAgZXZlbnQuZGF0YS51cmwgPSBfX3V2LnJld3JpdGVVcmwoZXZlbnQuZGF0YS51cmwpOw0KICAgIH0pOw0KDQogICAgLy8gSGlzdG9yeQ0KICAgIGNsaWVudC5oaXN0b3J5Lm9uKCdyZXBsYWNlU3RhdGUnLCBldmVudCA9PiB7DQogICAgICAgIGlmIChldmVudC5kYXRhLnVybCkgZXZlbnQuZGF0YS51cmwgPSBfX3V2LnJld3JpdGVVcmwoZXZlbnQuZGF0YS51cmwsICdfX3V2JyBpbiBldmVudC50aGF0ID8gZXZlbnQudGhhdC5fX3V2Lm1ldGEgOiBfX3V2Lm1ldGEpOw0KICAgIH0pOw0KICAgIGNsaWVudC5oaXN0b3J5Lm9uKCdwdXNoU3RhdGUnLCBldmVudCA9PiB7DQogICAgICAgIGlmIChldmVudC5kYXRhLnVybCkgZXZlbnQuZGF0YS51cmwgPSBfX3V2LnJld3JpdGVVcmwoZXZlbnQuZGF0YS51cmwsICdfX3V2JyBpbiBldmVudC50aGF0ID8gZXZlbnQudGhhdC5fX3V2Lm1ldGEgOiBfX3V2Lm1ldGEpOw0KICAgIH0pOw0KDQogICAgLy8gRWxlbWVudCBnZXQgc2V0IGF0dHJpYnV0ZSBtZXRob2RzDQogICAgY2xpZW50LmVsZW1lbnQub24oJ2dldEF0dHJpYnV0ZScsIGV2ZW50ID0+IHsNCiAgICAgICAgaWYgKGNsaWVudC5lbGVtZW50Lmhhc0F0dHJpYnV0ZS5jYWxsKGV2ZW50LnRoYXQsIF9fdXYuYXR0cmlidXRlUHJlZml4ICsgJy1hdHRyLScgKyBldmVudC5kYXRhLm5hbWUpKSB7DQogICAgICAgICAgICBldmVudC5yZXNwb25kV2l0aCgNCiAgICAgICAgICAgICAgICBldmVudC50YXJnZXQuY2FsbChldmVudC50aGF0LCBfX3V2LmF0dHJpYnV0ZVByZWZpeCArICctYXR0ci0nICsgZXZlbnQuZGF0YS5uYW1lKQ0KICAgICAgICAgICAgKTsNCiAgICAgICAgfTsNCiAgICB9KTsNCg0KICAgIC8vIE1lc3NhZ2UNCiAgICBjbGllbnQubWVzc2FnZS5vbigncG9zdE1lc3NhZ2UnLCBldmVudCA9PiB7DQogICAgICAgIGxldCB0byA9IGV2ZW50LmRhdGEub3JpZ2luOw0KICAgICAgICBsZXQgY2FsbCA9IF9fdXYuY2FsbDsNCg0KDQogICAgICAgIGlmIChldmVudC50aGF0KSB7DQogICAgICAgICAgICBjYWxsID0gZXZlbnQudGhhdC5fX3V2JHNvdXJjZS5jYWxsOw0KICAgICAgICB9Ow0KDQogICAgICAgIGV2ZW50LmRhdGEub3JpZ2luID0gJyonOw0KICAgICAgICBldmVudC5kYXRhLm1lc3NhZ2UgPSB7DQogICAgICAgICAgICBfX2RhdGE6IGV2ZW50LmRhdGEubWVzc2FnZSwNCiAgICAgICAgICAgIF9fb3JpZ2luOiAoZXZlbnQudGhhdCB8fCBldmVudC50YXJnZXQpLl9fdXYkc291cmNlLmxvY2F0aW9uLm9yaWdpbiwNCiAgICAgICAgICAgIF9fdG86IHRvLA0KICAgICAgICB9Ow0KDQogICAgICAgIGV2ZW50LnJlc3BvbmRXaXRoKA0KICAgICAgICAgICAgd29ya2VyID8NCiAgICAgICAgICAgIGNhbGwoZXZlbnQudGFyZ2V0LCBbZXZlbnQuZGF0YS5tZXNzYWdlLCBldmVudC5kYXRhLnRyYW5zZmVyXSwgZXZlbnQudGhhdCkgOg0KICAgICAgICAgICAgY2FsbChldmVudC50YXJnZXQsIFtldmVudC5kYXRhLm1lc3NhZ2UsIGV2ZW50LmRhdGEub3JpZ2luLCBldmVudC5kYXRhLnRyYW5zZmVyXSwgZXZlbnQudGhhdCkNCiAgICAgICAgKTsNCg0KICAgIH0pOw0KDQogICAgY2xpZW50Lm1lc3NhZ2Uub24oJ2RhdGEnLCBldmVudCA9PiB7DQogICAgICAgIGNvbnN0IHsgdmFsdWU6IGRhdGEgfSA9IGV2ZW50LmRhdGE7DQogICAgICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ29iamVjdCcgJiYgJ19fZGF0YScgaW4gZGF0YSAmJiAnX19vcmlnaW4nIGluIGRhdGEpIHsNCiAgICAgICAgICAgIGV2ZW50LnJlc3BvbmRXaXRoKGRhdGEuX19kYXRhKTsNCiAgICAgICAgfTsNCiAgICB9KTsNCg0KICAgIGNsaWVudC5tZXNzYWdlLm9uKCdvcmlnaW4nLCBldmVudCA9PiB7DQogICAgICAgIGNvbnN0IGRhdGEgPSBjbGllbnQubWVzc2FnZS5tZXNzYWdlRGF0YS5nZXQuY2FsbChldmVudC50aGF0KTsNCiAgICAgICAgaWYgKHR5cGVvZiBkYXRhID09PSAnb2JqZWN0JyAmJiBkYXRhLl9fZGF0YSAmJiBkYXRhLl9fb3JpZ2luKSB7DQogICAgICAgICAgICBldmVudC5yZXNwb25kV2l0aChkYXRhLl9fb3JpZ2luKTsNCiAgICAgICAgfTsNCiAgICB9KTsNCg0KICAgIGNsaWVudC5vdmVycmlkZURlc2NyaXB0b3Iod2luZG93LCAnb3JpZ2luJywgew0KICAgICAgICBnZXQ6ICh0YXJnZXQsIHRoYXQpID0+IHsNCiAgICAgICAgICAgIHJldHVybiBfX3V2LmxvY2F0aW9uLm9yaWdpbjsNCiAgICAgICAgfSwNCiAgICB9KTsNCg0KICAgIGNsaWVudC5ub2RlLm9uKCdiYXNlVVJJJywgZXZlbnQgPT4gew0KICAgICAgICBpZiAoZXZlbnQuZGF0YS52YWx1ZS5zdGFydHNXaXRoKHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4pKSBldmVudC5kYXRhLnZhbHVlID0gX191di5zb3VyY2VVcmwoZXZlbnQuZGF0YS52YWx1ZSk7DQogICAgfSk7DQoNCiAgICBjbGllbnQuZWxlbWVudC5vbignc2V0QXR0cmlidXRlJywgZXZlbnQgPT4gew0KICAgICAgICBpZiAoZXZlbnQudGhhdCBpbnN0YW5jZW9mIEhUTUxNZWRpYUVsZW1lbnQgJiYgZXZlbnQuZGF0YS5uYW1lID09PSAnc3JjJyAmJiBldmVudC5kYXRhLnZhbHVlLnN0YXJ0c1dpdGgoJ2Jsb2I6JykpIHsNCiAgICAgICAgICAgIGV2ZW50LnRhcmdldC5jYWxsKGV2ZW50LnRoYXQsIF9fdXYuYXR0cmlidXRlUHJlZml4ICsgJy1hdHRyLScgKyBldmVudC5kYXRhLm5hbWUsIGV2ZW50LmRhdGEudmFsdWUpOw0KICAgICAgICAgICAgZXZlbnQuZGF0YS52YWx1ZSA9IF9fdXYuYmxvYlVybHMuZ2V0KGV2ZW50LmRhdGEudmFsdWUpOw0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9Ow0KDQogICAgICAgIGlmIChfX3V2LmF0dHJzLmlzVXJsKGV2ZW50LmRhdGEubmFtZSkpIHsNCiAgICAgICAgICAgIGV2ZW50LnRhcmdldC5jYWxsKGV2ZW50LnRoYXQsIF9fdXYuYXR0cmlidXRlUHJlZml4ICsgJy1hdHRyLScgKyBldmVudC5kYXRhLm5hbWUsIGV2ZW50LmRhdGEudmFsdWUpOw0KICAgICAgICAgICAgZXZlbnQuZGF0YS52YWx1ZSA9IF9fdXYucmV3cml0ZVVybChldmVudC5kYXRhLnZhbHVlKTsNCiAgICAgICAgfTsNCg0KICAgICAgICBpZiAoX191di5hdHRycy5pc1N0eWxlKGV2ZW50LmRhdGEubmFtZSkpIHsNCiAgICAgICAgICAgIGV2ZW50LnRhcmdldC5jYWxsKGV2ZW50LnRoYXQsIF9fdXYuYXR0cmlidXRlUHJlZml4ICsgJy1hdHRyLScgKyBldmVudC5kYXRhLm5hbWUsIGV2ZW50LmRhdGEudmFsdWUpOw0KICAgICAgICAgICAgZXZlbnQuZGF0YS52YWx1ZSA9IF9fdXYucmV3cml0ZUNTUyhldmVudC5kYXRhLnZhbHVlLCB7IGNvbnRleHQ6ICdkZWNsYXJhdGlvbkxpc3QnIH0pOw0KICAgICAgICB9Ow0KDQogICAgICAgIGlmIChfX3V2LmF0dHJzLmlzSHRtbChldmVudC5kYXRhLm5hbWUpKSB7DQogICAgICAgICAgICBldmVudC50YXJnZXQuY2FsbChldmVudC50aGF0LCBfX3V2LmF0dHJpYnV0ZVByZWZpeCArICctYXR0ci0nICsgZXZlbnQuZGF0YS5uYW1lLCBldmVudC5kYXRhLnZhbHVlKTsNCiAgICAgICAgICAgIGV2ZW50LmRhdGEudmFsdWUgPSBfX3V2LnJld3JpdGVIdG1sKGV2ZW50LmRhdGEudmFsdWUsIHsuLi5fX3V2Lm1ldGEsIGRvY3VtZW50OiB0cnVlLCBpbmplY3RIZWFkOl9fdXYuY3JlYXRlSHRtbEluamVjdChfX3V2LmhhbmRsZXJTY3JpcHQsIF9fdXYuYnVuZGxlU2NyaXB0LCBfX3V2LmNvbmZpZ1NjcmlwdCwgX191di5jb29raWVTdHIsIHdpbmRvdy5sb2NhdGlvbi5ocmVmKSB9KTsNCiAgICAgICAgfTsNCg0KICAgICAgICBpZiAoX191di5hdHRycy5pc1NyY3NldChldmVudC5kYXRhLm5hbWUpKSB7DQogICAgICAgICAgICBldmVudC50YXJnZXQuY2FsbChldmVudC50aGF0LCBfX3V2LmF0dHJpYnV0ZVByZWZpeCArICctYXR0ci0nICsgZXZlbnQuZGF0YS5uYW1lLCBldmVudC5kYXRhLnZhbHVlKTsNCiAgICAgICAgICAgIGV2ZW50LmRhdGEudmFsdWUgPSBfX3V2Lmh0bWwud3JhcFNyY3NldChldmVudC5kYXRhLnZhbHVlKTsNCiAgICAgICAgfTsNCg0KICAgICAgICBpZiAoX191di5hdHRycy5pc0ZvcmJpZGRlbihldmVudC5kYXRhLm5hbWUpKSB7DQogICAgICAgICAgICBldmVudC5kYXRhLm5hbWUgPSBfX3V2LmF0dHJpYnV0ZVByZWZpeCArICctYXR0ci0nICsgZXZlbnQuZGF0YS5uYW1lOw0KICAgICAgICB9Ow0KICAgIH0pOw0KDQogICAgY2xpZW50LmVsZW1lbnQub24oJ2F1ZGlvJywgZXZlbnQgPT4gew0KICAgICAgICBldmVudC5kYXRhLnVybCA9IF9fdXYucmV3cml0ZVVybChldmVudC5kYXRhLnVybCk7DQogICAgfSk7DQoNCiAgICAvLyBFbGVtZW50IFByb3BlcnR5IEF0dHJpYnV0ZXMNCiAgICBjbGllbnQuZWxlbWVudC5ob29rUHJvcGVydHkoW0hUTUxBbmNob3JFbGVtZW50LCBIVE1MQXJlYUVsZW1lbnQsIEhUTUxMaW5rRWxlbWVudCwgSFRNTEJhc2VFbGVtZW50XSwgJ2hyZWYnLCB7DQogICAgICAgIGdldDogKHRhcmdldCwgdGhhdCkgPT4gew0KICAgICAgICAgICAgcmV0dXJuIF9fdXYuc291cmNlVXJsKA0KICAgICAgICAgICAgICAgIHRhcmdldC5jYWxsKHRoYXQpDQogICAgICAgICAgICApOw0KICAgICAgICB9LA0KICAgICAgICBzZXQ6ICh0YXJnZXQsIHRoYXQsIFt2YWxdKSA9PiB7DQogICAgICAgICAgICBjbGllbnQuZWxlbWVudC5zZXRBdHRyaWJ1dGUuY2FsbCh0aGF0LCBfX3V2LmF0dHJpYnV0ZVByZWZpeCArICctYXR0ci1ocmVmJywgdmFsKQ0KICAgICAgICAgICAgdGFyZ2V0LmNhbGwodGhhdCwgX191di5yZXdyaXRlVXJsKHZhbCkpOw0KICAgICAgICB9LA0KICAgIH0pOyANCg0KICAgIGNsaWVudC5lbGVtZW50Lmhvb2tQcm9wZXJ0eShbSFRNTFNjcmlwdEVsZW1lbnQsIEhUTUxBdWRpb0VsZW1lbnQsIEhUTUxWaWRlb0VsZW1lbnQsICBIVE1MTWVkaWFFbGVtZW50LCBIVE1MSW1hZ2VFbGVtZW50LCBIVE1MSW5wdXRFbGVtZW50LCBIVE1MRW1iZWRFbGVtZW50LCBIVE1MSUZyYW1lRWxlbWVudCwgSFRNTFRyYWNrRWxlbWVudCwgSFRNTFNvdXJjZUVsZW1lbnRdLCAnc3JjJywgew0KICAgICAgICBnZXQ6ICh0YXJnZXQsIHRoYXQpID0+IHsNCiAgICAgICAgICAgIHJldHVybiBfX3V2LnNvdXJjZVVybCgNCiAgICAgICAgICAgICAgICB0YXJnZXQuY2FsbCh0aGF0KQ0KICAgICAgICAgICAgKTsNCiAgICAgICAgfSwNCiAgICAgICAgc2V0OiAodGFyZ2V0LCB0aGF0LCBbdmFsXSkgPT4gew0KICAgICAgICAgICAgaWYgKG5ldyBTdHJpbmcodmFsKS50b1N0cmluZygpLnRyaW0oKS5zdGFydHNXaXRoKCdibG9iOicpICYmIHRoYXQgaW5zdGFuY2VvZiBIVE1MTWVkaWFFbGVtZW50KSB7DQogICAgICAgICAgICAgICAgY2xpZW50LmVsZW1lbnQuc2V0QXR0cmlidXRlLmNhbGwodGhhdCwgX191di5hdHRyaWJ1dGVQcmVmaXggKyAnLWF0dHItc3JjJywgdmFsKQ0KICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXQuY2FsbCh0aGF0LCBfX3V2LmJsb2JVcmxzLmdldCh2YWwpIHx8IHZhbCk7DQogICAgICAgICAgICB9Ow0KDQogICAgICAgICAgICBjbGllbnQuZWxlbWVudC5zZXRBdHRyaWJ1dGUuY2FsbCh0aGF0LCBfX3V2LmF0dHJpYnV0ZVByZWZpeCArICctYXR0ci1zcmMnLCB2YWwpDQogICAgICAgICAgICB0YXJnZXQuY2FsbCh0aGF0LCBfX3V2LnJld3JpdGVVcmwodmFsKSk7DQogICAgICAgIH0sDQogICAgfSk7DQoNCiAgICBjbGllbnQuZWxlbWVudC5ob29rUHJvcGVydHkoW0hUTUxGb3JtRWxlbWVudF0sICdhY3Rpb24nLCB7DQogICAgICAgIGdldDogKHRhcmdldCwgdGhhdCkgPT4gew0KICAgICAgICAgICAgcmV0dXJuIF9fdXYuc291cmNlVXJsKA0KICAgICAgICAgICAgICAgIHRhcmdldC5jYWxsKHRoYXQpDQogICAgICAgICAgICApOw0KICAgICAgICB9LA0KICAgICAgICBzZXQ6ICh0YXJnZXQsIHRoYXQsIFt2YWxdKSA9PiB7DQogICAgICAgICAgICBjbGllbnQuZWxlbWVudC5zZXRBdHRyaWJ1dGUuY2FsbCh0aGF0LCBfX3V2LmF0dHJpYnV0ZVByZWZpeCArICctYXR0ci1hY3Rpb24nLCB2YWwpDQogICAgICAgICAgICB0YXJnZXQuY2FsbCh0aGF0LCBfX3V2LnJld3JpdGVVcmwodmFsKSk7DQogICAgICAgIH0sDQogICAgfSk7DQoNCiAgICBjbGllbnQuZWxlbWVudC5ob29rUHJvcGVydHkoW0hUTUxJbWFnZUVsZW1lbnRdLCAnc3Jjc2V0Jywgew0KICAgICAgICBnZXQ6ICh0YXJnZXQsIHRoYXQpID0+IHsNCiAgICAgICAgICAgIHJldHVybiBjbGllbnQuZWxlbWVudC5nZXRBdHRyaWJ1dGUuY2FsbCh0aGF0LCBfX3V2LmF0dHJpYnV0ZVByZWZpeCArICctYXR0ci1zcmNzZXQnKSB8fCB0YXJnZXQuY2FsbCh0aGF0KTsNCiAgICAgICAgfSwNCiAgICAgICAgc2V0OiAodGFyZ2V0LCB0aGF0LCBbdmFsXSkgPT4gew0KICAgICAgICAgICAgY2xpZW50LmVsZW1lbnQuc2V0QXR0cmlidXRlLmNhbGwodGhhdCwgX191di5hdHRyaWJ1dGVQcmVmaXggKyAnLWF0dHItc3Jjc2V0JywgdmFsKQ0KICAgICAgICAgICAgdGFyZ2V0LmNhbGwodGhhdCwgX191di5odG1sLndyYXBTcmNzZXQodmFsKSk7DQogICAgICAgIH0sDQogICAgfSk7DQoNCiAgICBjbGllbnQuZWxlbWVudC5ob29rUHJvcGVydHkoSFRNTFNjcmlwdEVsZW1lbnQsICdpbnRlZ3JpdHknLCB7DQogICAgICAgIGdldDogKHRhcmdldCwgdGhhdCkgPT4gew0KICAgICAgICAgICAgcmV0dXJuIGNsaWVudC5lbGVtZW50LmdldEF0dHJpYnV0ZS5jYWxsKHRoYXQsIF9fdXYuYXR0cmlidXRlUHJlZml4ICsgJy1hdHRyLWludGVncml0eScpOw0KICAgICAgICB9LA0KICAgICAgICBzZXQ6ICh0YXJnZXQsIHRoYXQsIFt2YWxdKSA9PiB7DQogICAgICAgICAgICBjbGllbnQuZWxlbWVudC5zZXRBdHRyaWJ1dGUuY2FsbCh0aGF0LCBfX3V2LmF0dHJpYnV0ZVByZWZpeCArICctYXR0ci1pbnRlZ3JpdHknLCB2YWwpOw0KICAgICAgICB9LA0KICAgIH0pOw0KDQogICAgY2xpZW50LmVsZW1lbnQuaG9va1Byb3BlcnR5KEhUTUxJRnJhbWVFbGVtZW50LCAnc2FuZGJveCcsIHsNCiAgICAgICAgZ2V0OiAodGFyZ2V0LCB0aGF0KSA9PiB7DQogICAgICAgICAgICByZXR1cm4gY2xpZW50LmVsZW1lbnQuZ2V0QXR0cmlidXRlLmNhbGwodGhhdCwgX191di5hdHRyaWJ1dGVQcmVmaXggKyAnLWF0dHItc2FuZGJveCcpIHx8IHRhcmdldC5jYWxsKHRoYXQpOw0KICAgICAgICB9LA0KICAgICAgICBzZXQ6ICh0YXJnZXQsIHRoYXQsIFt2YWxdKSA9PiB7DQogICAgICAgICAgICBjbGllbnQuZWxlbWVudC5zZXRBdHRyaWJ1dGUuY2FsbCh0aGF0LCBfX3V2LmF0dHJpYnV0ZVByZWZpeCArICctYXR0ci1zYW5kYm94JywgdmFsKTsNCiAgICAgICAgfSwNCiAgICB9KTsNCg0KICAgIGNsaWVudC5lbGVtZW50Lmhvb2tQcm9wZXJ0eShIVE1MSUZyYW1lRWxlbWVudCwgJ2NvbnRlbnRXaW5kb3cnLCB7DQogICAgICAgIGdldDogKHRhcmdldCwgdGhhdCkgPT4gew0KICAgICAgICAgICAgY29uc3Qgd2luID0gdGFyZ2V0LmNhbGwodGhhdCk7DQogICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgIGlmICghd2luLl9fdXYpIF9fdXZIb29rKHdpbiwgY29uZmlnLCBiYXJlKTsNCiAgICAgICAgICAgICAgICByZXR1cm4gd2luOw0KICAgICAgICAgICAgfSBjYXRjaCAoZSkgew0KICAgICAgICAgICAgICAgIHJldHVybiB3aW47DQogICAgICAgICAgICB9Ow0KICAgICAgICB9LA0KICAgIH0pOw0KDQogICAgY2xpZW50LmVsZW1lbnQuaG9va1Byb3BlcnR5KEhUTUxJRnJhbWVFbGVtZW50LCAnY29udGVudERvY3VtZW50Jywgew0KICAgICAgICBnZXQ6ICh0YXJnZXQsIHRoYXQpID0+IHsNCiAgICAgICAgICAgIGNvbnN0IGRvYyA9IHRhcmdldC5jYWxsKHRoYXQpOw0KICAgICAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgICAgICBjb25zdCB3aW4gPSBkb2MuZGVmYXVsdFZpZXcNCiAgICAgICAgICAgICAgICBpZiAoIXdpbi5fX3V2KSBfX3V2SG9vayh3aW4sIGNvbmZpZywgYmFyZSk7DQogICAgICAgICAgICAgICAgcmV0dXJuIGRvYzsNCiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gd2luOw0KICAgICAgICAgICAgfTsNCiAgICAgICAgfSwNCiAgICB9KTsNCg0KICAgIGNsaWVudC5lbGVtZW50Lmhvb2tQcm9wZXJ0eShIVE1MSUZyYW1lRWxlbWVudCwgJ3NyY2RvYycsIHsNCiAgICAgICAgZ2V0OiAodGFyZ2V0LCB0aGF0KSA9PiB7DQogICAgICAgICAgICByZXR1cm4gY2xpZW50LmVsZW1lbnQuZ2V0QXR0cmlidXRlLmNhbGwodGhhdCwgX191di5hdHRyaWJ1dGVQcmVmaXggKyAnLWF0dHItc3JjZG9jJykgfHwgdGFyZ2V0LmNhbGwodGhhdCk7DQogICAgICAgIH0sDQogICAgICAgIHNldDogKHRhcmdldCwgdGhhdCwgW3ZhbF0pID0+IHsNCiAgICAgICAgICAgIHRhcmdldC5jYWxsKHRoYXQsIF9fdXYucmV3cml0ZUh0bWwodmFsLCB7DQogICAgICAgICAgICAgICAgZG9jdW1lbnQ6IHRydWUsDQogICAgICAgICAgICAgICAgaW5qZWN0SGVhZDogX191di5jcmVhdGVIdG1sSW5qZWN0KF9fdXYuaGFuZGxlclNjcmlwdCwgX191di5idW5kbGVTY3JpcHQsIF9fdXYuY29uZmlnU2NyaXB0LCBfX3V2LmNvb2tpZVN0ciwgd2luZG93LmxvY2F0aW9uLmhyZWYpDQogICAgICAgICAgICB9KSkNCiAgICAgICAgfSwNCiAgICB9KTsNCg0KICAgIGNsaWVudC5ub2RlLm9uKCdnZXRUZXh0Q29udGVudCcsIGV2ZW50ID0+IHsNCiAgICAgICAgaWYgKGV2ZW50LnRoYXQudGFnTmFtZSA9PT0gJ1NDUklQVCcpIHsNCiAgICAgICAgICAgIGV2ZW50LmRhdGEudmFsdWUgPSBfX3V2LmpzLnNvdXJjZShldmVudC5kYXRhLnZhbHVlKTsNCiAgICAgICAgfTsNCiAgICB9KTsNCg0KICAgIGNsaWVudC5ub2RlLm9uKCdzZXRUZXh0Q29udGVudCcsIGV2ZW50ID0+IHsNCiAgICAgICAgaWYgKGV2ZW50LnRoYXQudGFnTmFtZSA9PT0gJ1NDUklQVCcpIHsNCiAgICAgICAgICAgIGV2ZW50LmRhdGEudmFsdWUgPSBfX3V2LmpzLnJld3JpdGUoZXZlbnQuZGF0YS52YWx1ZSk7DQogICAgICAgIH07DQogICAgfSk7DQoNCiAgICAvLyBVbnRpbCBwcm9wZXIgcmV3cml0aW5nIGlzIGltcGxlbWVudGVkIGZvciBzZXJ2aWNlIHdvcmtlcnMuDQogICAgLy8gTm90IHN1cmUgYXRtIGhvdyB0byBpbXBsZW1lbnQgaXQgd2l0aCB0aGUgYWxyZWFkeSBidWlsdCBpbiBzZXJ2aWNlIHdvcmtlcg0KICAgIGlmICgnc2VydmljZVdvcmtlcicgaW4gd2luZG93Lm5hdmlnYXRvcikgew0KICAgICAgICBkZWxldGUgd2luZG93Lk5hdmlnYXRvci5wcm90b3R5cGUuc2VydmljZVdvcmtlcjsNCiAgICB9Ow0KDQogICAgLy8gRG9jdW1lbnQNCiAgICBjbGllbnQuZG9jdW1lbnQub24oJ2dldERvbWFpbicsIGV2ZW50ID0+IHsNCiAgICAgICAgZXZlbnQuZGF0YS52YWx1ZSA9IF9fdXYuZG9tYWluOw0KICAgIH0pOw0KICAgIGNsaWVudC5kb2N1bWVudC5vbignc2V0RG9tYWluJywgZXZlbnQgPT4gew0KICAgICAgICBpZiAoIWV2ZW50LmRhdGEudmFsdWUudG9TdHJpbmcoKS5lbmRzV2l0aChfX3V2Lm1ldGEudXJsLmhvc3RuYW1lLnNwbGl0KCcuJykuc2xpY2UoLTIpLmpvaW4oJy4nKSkpIHJldHVybiBldmVudC5yZXNwb25kV2l0aCgnJyk7DQogICAgICAgIGV2ZW50LnJlc3BvbmRXaXRoKF9fdXYuZG9tYWluID0gZXZlbnQuZGF0YS52YWx1ZSk7DQogICAgfSkNCg0KICAgIGNsaWVudC5kb2N1bWVudC5vbigndXJsJywgZXZlbnQgPT4gew0KICAgICAgICBldmVudC5kYXRhLnZhbHVlID0gX191di5sb2NhdGlvbi5ocmVmOw0KICAgIH0pOw0KDQogICAgY2xpZW50LmRvY3VtZW50Lm9uKCdkb2N1bWVudFVSSScsIGV2ZW50ID0+IHsNCiAgICAgICAgZXZlbnQuZGF0YS52YWx1ZSA9IF9fdXYubG9jYXRpb24uaHJlZjsNCiAgICB9KTsNCg0KICAgIGNsaWVudC5kb2N1bWVudC5vbigncmVmZXJyZXInLCBldmVudCA9PiB7DQogICAgICAgIGV2ZW50LmRhdGEudmFsdWUgPSBfX3V2LnJlZmVycmVyIHx8IF9fdXYuc291cmNlVXJsKGV2ZW50LmRhdGEudmFsdWUpOw0KICAgIH0pOw0KDQogICAgY2xpZW50LmRvY3VtZW50Lm9uKCdwYXJzZUZyb21TdHJpbmcnLCBldmVudCA9PiB7DQogICAgICAgIGlmIChldmVudC5kYXRhLnR5cGUgIT09ICd0ZXh0L2h0bWwnKSByZXR1cm4gZmFsc2U7DQogICAgICAgIGV2ZW50LmRhdGEuc3RyaW5nID0gX191di5yZXdyaXRlSHRtbChldmVudC5kYXRhLnN0cmluZywgey4uLl9fdXYubWV0YSwgZG9jdW1lbnQ6IHRydWUsIH0pOw0KICAgIH0pOw0KDQogICAgLy8gQXR0cmlidXRlIChub2RlLmF0dHJpYnV0ZXMpDQogICAgY2xpZW50LmF0dHJpYnV0ZS5vbignZ2V0VmFsdWUnLCBldmVudCA9PiB7DQogICAgICAgIGlmIChjbGllbnQuZWxlbWVudC5oYXNBdHRyaWJ1dGUuY2FsbChldmVudC50aGF0Lm93bmVyRWxlbWVudCwgX191di5hdHRyaWJ1dGVQcmVmaXggKyAnLWF0dHItJyArIGV2ZW50LmRhdGEubmFtZSkpIHsNCiAgICAgICAgICAgIGV2ZW50LmRhdGEudmFsdWUgPSBjbGllbnQuZWxlbWVudC5nZXRBdHRyaWJ1dGUuY2FsbChldmVudC50aGF0Lm93bmVyRWxlbWVudCwgX191di5hdHRyaWJ1dGVQcmVmaXggKyAnLWF0dHItJyArIGV2ZW50LmRhdGEubmFtZSk7DQogICAgICAgIH07DQogICAgfSk7DQoNCiAgICBjbGllbnQuYXR0cmlidXRlLm9uKCdzZXRWYWx1ZScsIGV2ZW50ID0+IHsNCiAgICAgICAgaWYgKF9fdXYuYXR0cnMuaXNVcmwoZXZlbnQuZGF0YS5uYW1lKSkgew0KICAgICAgICAgICAgY2xpZW50LmVsZW1lbnQuc2V0QXR0cmlidXRlLmNhbGwoZXZlbnQudGhhdC5vd25lckVsZW1lbnQsIF9fdXYuYXR0cmlidXRlUHJlZml4ICsgJy1hdHRyLScgKyBldmVudC5kYXRhLm5hbWUsIGV2ZW50LmRhdGEudmFsdWUpOw0KICAgICAgICAgICAgZXZlbnQuZGF0YS52YWx1ZSA9IF9fdXYucmV3cml0ZVVybChldmVudC5kYXRhLnZhbHVlKTsNCiAgICAgICAgfTsNCg0KICAgICAgICBpZiAoX191di5hdHRycy5pc1N0eWxlKGV2ZW50LmRhdGEubmFtZSkpIHsNCiAgICAgICAgICAgIGNsaWVudC5lbGVtZW50LnNldEF0dHJpYnV0ZS5jYWxsKGV2ZW50LnRoYXQub3duZXJFbGVtZW50LCBfX3V2LmF0dHJpYnV0ZVByZWZpeCArICctYXR0ci0nICsgZXZlbnQuZGF0YS5uYW1lLCBldmVudC5kYXRhLnZhbHVlKTsNCiAgICAgICAgICAgIGV2ZW50LmRhdGEudmFsdWUgPSBfX3V2LnJld3JpdGVDU1MoZXZlbnQuZGF0YS52YWx1ZSwgeyBjb250ZXh0OiAnZGVjbGFyYXRpb25MaXN0JyB9KTsNCiAgICAgICAgfTsNCg0KICAgICAgICBpZiAoX191di5hdHRycy5pc0h0bWwoZXZlbnQuZGF0YS5uYW1lKSkgew0KICAgICAgICAgICAgY2xpZW50LmVsZW1lbnQuc2V0QXR0cmlidXRlLmNhbGwoZXZlbnQudGhhdC5vd25lckVsZW1lbnQsIF9fdXYuYXR0cmlidXRlUHJlZml4ICsgJy1hdHRyLScgKyBldmVudC5kYXRhLm5hbWUsIGV2ZW50LmRhdGEudmFsdWUpOw0KICAgICAgICAgICAgZXZlbnQuZGF0YS52YWx1ZSA9IF9fdXYucmV3cml0ZUh0bWwoZXZlbnQuZGF0YS52YWx1ZSwgey4uLl9fdXYubWV0YSwgZG9jdW1lbnQ6IHRydWUsIGluamVjdEhlYWQ6X191di5jcmVhdGVIdG1sSW5qZWN0KF9fdXYuaGFuZGxlclNjcmlwdCwgX191di5idW5kbGVTY3JpcHQsIF9fdXYuY29uZmlnU2NyaXB0LCBfX3V2LmNvb2tpZVN0ciwgd2luZG93LmxvY2F0aW9uLmhyZWYpIH0pOw0KICAgICAgICB9Ow0KDQogICAgICAgIGlmIChfX3V2LmF0dHJzLmlzU3Jjc2V0KGV2ZW50LmRhdGEubmFtZSkpIHsNCiAgICAgICAgICAgIGNsaWVudC5lbGVtZW50LnNldEF0dHJpYnV0ZS5jYWxsKGV2ZW50LnRoYXQub3duZXJFbGVtZW50LCBfX3V2LmF0dHJpYnV0ZVByZWZpeCArICctYXR0ci0nICsgZXZlbnQuZGF0YS5uYW1lLCBldmVudC5kYXRhLnZhbHVlKTsNCiAgICAgICAgICAgIGV2ZW50LmRhdGEudmFsdWUgPSBfX3V2Lmh0bWwud3JhcFNyY3NldChldmVudC5kYXRhLnZhbHVlKTsNCiAgICAgICAgfTsNCg0KICAgIH0pOw0KDQogICAgLy8gVVJMDQogICAgY2xpZW50LnVybC5vbignY3JlYXRlT2JqZWN0VVJMJywgZXZlbnQgPT4gew0KICAgICAgICBsZXQgdXJsID0gZXZlbnQudGFyZ2V0LmNhbGwoZXZlbnQudGhhdCwgZXZlbnQuZGF0YS5vYmplY3QpOw0KICAgICAgICBpZiAodXJsLnN0YXJ0c1dpdGgoJ2Jsb2I6JyArIGxvY2F0aW9uLm9yaWdpbikpIHsNCiAgICAgICAgICAgIGxldCBuZXdVcmwgPSAnYmxvYjonICsgKF9fdXYubWV0YS51cmwuaHJlZiAhPT0gJ2Fib3V0OmJsYW5rJyA/ICBfX3V2Lm1ldGEudXJsLm9yaWdpbiA6IHdpbmRvdy5wYXJlbnQuX191di5tZXRhLnVybC5vcmlnaW4pICsgdXJsLnNsaWNlKCdibG9iOicubGVuZ3RoICsgbG9jYXRpb24ub3JpZ2luLmxlbmd0aCk7DQogICAgICAgICAgICBfX3V2LmJsb2JVcmxzLnNldChuZXdVcmwsIHVybCk7DQogICAgICAgICAgICBldmVudC5yZXNwb25kV2l0aChuZXdVcmwpOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgZXZlbnQucmVzcG9uZFdpdGgodXJsKTsNCiAgICAgICAgfTsNCiAgICB9KTsNCg0KICAgIGNsaWVudC51cmwub24oJ3Jldm9rZU9iamVjdFVSTCcsIGV2ZW50ID0+IHsNCiAgICAgICAgaWYgKF9fdXYuYmxvYlVybHMuaGFzKGV2ZW50LmRhdGEudXJsKSkgew0KICAgICAgICAgICAgY29uc3Qgb2xkID0gZXZlbnQuZGF0YS51cmw7DQogICAgICAgICAgICBldmVudC5kYXRhLnVybCA9IF9fdXYuYmxvYlVybHMuZ2V0KGV2ZW50LmRhdGEudXJsKTsNCiAgICAgICAgICAgIF9fdXYuYmxvYlVybHMuZGVsZXRlKG9sZCk7DQogICAgICAgIH07DQogICAgfSk7DQoNCiAgICBjbGllbnQuc3RvcmFnZS5vbignZ2V0JywgZXZlbnQgPT4gew0KICAgICAgICBldmVudC5kYXRhLm5hbWUgPSBtZXRob2RQcmVmaXggKyBfX3V2Lm1ldGEudXJsLm9yaWdpbiArICdAJyArIGV2ZW50LmRhdGEubmFtZTsNCiAgICB9KTsNCg0KICAgIGNsaWVudC5zdG9yYWdlLm9uKCdzZXQnLCBldmVudCA9PiB7DQogICAgICAgIGlmIChldmVudC50aGF0Ll9fdXYkc3RvcmFnZU9iaikgew0KICAgICAgICAgICAgZXZlbnQudGhhdC5fX3V2JHN0b3JhZ2VPYmpbZXZlbnQuZGF0YS5uYW1lXSA9IGV2ZW50LmRhdGEudmFsdWU7DQogICAgICAgIH07DQogICAgICAgIGV2ZW50LmRhdGEubmFtZSA9IG1ldGhvZFByZWZpeCArIF9fdXYubWV0YS51cmwub3JpZ2luICsgJ0AnICsgZXZlbnQuZGF0YS5uYW1lOw0KICAgIH0pOw0KDQogICAgY2xpZW50LnN0b3JhZ2Uub24oJ2RlbGV0ZScsIGV2ZW50ID0+IHsNCiAgICAgICAgaWYgKGV2ZW50LnRoYXQuX191diRzdG9yYWdlT2JqKSB7DQogICAgICAgICAgICBkZWxldGUgZXZlbnQudGhhdC5fX3V2JHN0b3JhZ2VPYmpbZXZlbnQuZGF0YS5uYW1lXTsNCiAgICAgICAgfTsNCiAgICAgICAgZXZlbnQuZGF0YS5uYW1lID0gbWV0aG9kUHJlZml4ICsgX191di5tZXRhLnVybC5vcmlnaW4gKyAnQCcgKyBldmVudC5kYXRhLm5hbWU7DQogICAgfSk7DQoNCiAgICBjbGllbnQuc3RvcmFnZS5vbignZ2V0SXRlbScsIGV2ZW50ID0+IHsNCiAgICAgICAgZXZlbnQuZGF0YS5uYW1lID0gbWV0aG9kUHJlZml4ICsgX191di5tZXRhLnVybC5vcmlnaW4gKyAnQCcgKyBldmVudC5kYXRhLm5hbWU7DQogICAgfSk7DQoNCiAgICBjbGllbnQuc3RvcmFnZS5vbignc2V0SXRlbScsIGV2ZW50ID0+IHsNCiAgICAgICAgaWYgKGV2ZW50LnRoYXQuX191diRzdG9yYWdlT2JqKSB7DQogICAgICAgICAgICBldmVudC50aGF0Ll9fdXYkc3RvcmFnZU9ialtldmVudC5kYXRhLm5hbWVdID0gZXZlbnQuZGF0YS52YWx1ZTsNCiAgICAgICAgfTsNCiAgICAgICAgZXZlbnQuZGF0YS5uYW1lID0gbWV0aG9kUHJlZml4ICsgX191di5tZXRhLnVybC5vcmlnaW4gKyAnQCcgKyBldmVudC5kYXRhLm5hbWU7DQogICAgfSk7DQoNCiAgICBjbGllbnQuc3RvcmFnZS5vbigncmVtb3ZlSXRlbScsIGV2ZW50ID0+IHsNCiAgICAgICAgaWYgKGV2ZW50LnRoYXQuX191diRzdG9yYWdlT2JqKSB7DQogICAgICAgICAgICBkZWxldGUgZXZlbnQudGhhdC5fX3V2JHN0b3JhZ2VPYmpbZXZlbnQuZGF0YS5uYW1lXTsNCiAgICAgICAgfTsNCiAgICAgICAgZXZlbnQuZGF0YS5uYW1lID0gbWV0aG9kUHJlZml4ICsgX191di5tZXRhLnVybC5vcmlnaW4gKyAnQCcgKyBldmVudC5kYXRhLm5hbWU7DQogICAgfSk7DQoNCiAgICBjbGllbnQuc3RvcmFnZS5vbignY2xlYXInLCBldmVudCA9PiB7DQogICAgICAgIGlmIChldmVudC50aGF0Ll9fdXYkc3RvcmFnZU9iaikgew0KICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgY2xpZW50Lm5hdGl2ZU1ldGhvZHMua2V5cy5jYWxsKG51bGwsIGV2ZW50LnRoYXQuX191diRzdG9yYWdlT2JqKSkgew0KICAgICAgICAgICAgICAgIGRlbGV0ZSBldmVudC50aGF0Ll9fdXYkc3RvcmFnZU9ialtrZXldOw0KICAgICAgICAgICAgICAgIGNsaWVudC5zdG9yYWdlLnJlbW92ZUl0ZW0uY2FsbChldmVudC50aGF0LCBtZXRob2RQcmVmaXggKyBfX3V2Lm1ldGEudXJsLm9yaWdpbiArICdAJyArIGtleSk7DQogICAgICAgICAgICAgICAgZXZlbnQucmVzcG9uZFdpdGgoKTsNCiAgICAgICAgICAgIH07DQogICAgICAgIH07DQogICAgfSk7DQoNCiAgICBjbGllbnQuc3RvcmFnZS5vbignbGVuZ3RoJywgZXZlbnQgPT4gew0KICAgICAgICBpZiAoZXZlbnQudGhhdC5fX3V2JHN0b3JhZ2VPYmopIHsNCiAgICAgICAgICAgIGV2ZW50LnJlc3BvbmRXaXRoKGNsaWVudC5uYXRpdmVNZXRob2RzLmtleXMuY2FsbChudWxsLCBldmVudC50aGF0Ll9fdXYkc3RvcmFnZU9iaikubGVuZ3RoKTsNCiAgICAgICAgfTsNCiAgICB9KTsNCg0KICAgIGNsaWVudC5zdG9yYWdlLm9uKCdrZXknLCBldmVudCA9PiB7DQogICAgICAgIGlmIChldmVudC50aGF0Ll9fdXYkc3RvcmFnZU9iaikgew0KICAgICAgICAgICAgZXZlbnQucmVzcG9uZFdpdGgoDQogICAgICAgICAgICAgICAgKGNsaWVudC5uYXRpdmVNZXRob2RzLmtleXMuY2FsbChudWxsLCBldmVudC50aGF0Ll9fdXYkc3RvcmFnZU9iailbZXZlbnQuZGF0YS5pbmRleF0gfHwgbnVsbCkNCiAgICAgICAgICAgICk7DQogICAgICAgIH07DQogICAgfSk7DQoNCiAgICBjbGllbnQud2Vic29ja2V0Lm9uKCd3ZWJzb2NrZXQnLCBhc3luYyBldmVudCA9PiB7DQogICAgICAgIGxldCB1cmw7DQogICAgICAgIHRyeSB7DQogICAgICAgICAgICB1cmwgPSBuZXcgVVJMKGV2ZW50LmRhdGEudXJsKTsNCiAgICAgICAgfSBjYXRjaChlKSB7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgIH07DQoNCiAgICAgICAgY29uc3QgaGVhZGVycyA9IHsNCiAgICAgICAgICAgIEhvc3Q6IHVybC5ob3N0LA0KICAgICAgICAgICAgT3JpZ2luOiBfX3V2Lm1ldGEudXJsLm9yaWdpbiwNCiAgICAgICAgICAgIFByYWdtYTogJ25vLWNhY2hlJywNCiAgICAgICAgICAgICdDYWNoZS1Db250cm9sJzogJ25vLWNhY2hlJywNCiAgICAgICAgICAgIFVwZ3JhZGU6ICd3ZWJzb2NrZXQnLA0KICAgICAgICAgICAgJ1VzZXItQWdlbnQnOiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCwNCiAgICAgICAgICAgICdDb25uZWN0aW9uJzogJ1VwZ3JhZGUnLA0KICAgICAgICB9Ow0KDQogICAgICAgIGNvbnN0IGNvb2tpZXMgPSBfX3V2LmNvb2tpZS5zZXJpYWxpemUoX191di5jb29raWVzLCB7IHVybCB9LCBmYWxzZSk7DQoNCiAgICAgICAgaWYgKGNvb2tpZXMpIGhlYWRlcnMuQ29va2llID0gY29va2llczsNCiAgICAgICAgY29uc3QgcHJvdG9jb2xzID0gWy4uLmV2ZW50LmRhdGEucHJvdG9jb2xzXTsNCg0KICAgICAgICBjb25zdCByZW1vdGUgPSB7DQogICAgICAgICAgICBwcm90b2NvbDogdXJsLnByb3RvY29sLA0KICAgICAgICAgICAgaG9zdDogdXJsLmhvc3RuYW1lLA0KICAgICAgICAgICAgcG9ydDogdXJsLnBvcnQgfHwgKHVybC5wcm90b2NvbCA9PT0gJ3dzczonID8gJzQ0MycgOiAnODAnKSwNCiAgICAgICAgICAgIHBhdGg6IHVybC5wYXRobmFtZSArIHVybC5zZWFyY2gsDQogICAgICAgIH07DQoNCiAgICAgICAgaWYgKHByb3RvY29scy5sZW5ndGgpIGhlYWRlcnNbJ1NlYy1XZWJTb2NrZXQtUHJvdG9jb2wnXSA9IHByb3RvY29scy5qb2luKCcsICcpOw0KDQogICAgICAgIGV2ZW50LmRhdGEudXJsID0gIChfX3V2LmJhcmUucHJvdG9jb2wgPT09ICdodHRwczonID8gJ3dzczovLycgOiAnd3M6Ly8nKSArIF9fdXYuYmFyZS5ob3N0ICsgX191di5iYXJlLnBhdGhuYW1lICsgJ3YxLyc7DQogICAgICAgIGV2ZW50LmRhdGEucHJvdG9jb2xzID0gWw0KICAgICAgICAgICAgJ2JhcmUnLA0KICAgICAgICAgICAgX191di5lbmNvZGVQcm90b2NvbChKU09OLnN0cmluZ2lmeSh7DQogICAgICAgICAgICAgICAgcmVtb3RlLA0KICAgICAgICAgICAgICAgIGhlYWRlcnMsDQogICAgICAgICAgICAgICAgZm9yd2FyZF9oZWFkZXJzOiBbDQogICAgICAgICAgICAgICAgICAgICdhY2NlcHQnLA0KICAgICAgICAgICAgICAgICAgICAnYWNjZXB0LWVuY29kaW5nJywNCiAgICAgICAgICAgICAgICAgICAgJ2FjY2VwdC1sYW5ndWFnZScsDQogICAgICAgICAgICAgICAgICAgICdzZWMtd2Vic29ja2V0LWV4dGVuc2lvbnMnLA0KICAgICAgICAgICAgICAgICAgICAnc2VjLXdlYnNvY2tldC1rZXknLA0KICAgICAgICAgICAgICAgICAgICAnc2VjLXdlYnNvY2tldC12ZXJzaW9uJywNCiAgICAgICAgICAgICAgICBdLA0KICAgICAgICAgICAgfSkpLA0KICAgICAgICBdOw0KDQogICAgICAgIGNvbnN0IHdzID0gbmV3IGV2ZW50LnRhcmdldChldmVudC5kYXRhLnVybCwgZXZlbnQuZGF0YS5wcm90b2NvbHMpOw0KDQogICAgICAgIGNsaWVudC5uYXRpdmVNZXRob2RzLmRlZmluZVByb3BlcnR5KHdzLCBtZXRob2RQcmVmaXggKyAndXJsJywgew0KICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsDQogICAgICAgICAgICB2YWx1ZTogdXJsLmhyZWYsDQogICAgICAgIH0pOw0KDQogICAgICAgIGV2ZW50LnJlc3BvbmRXaXRoKA0KICAgICAgICAgICAgd3MNCiAgICAgICAgKTsNCiAgICB9KTsNCg0KICAgIGNsaWVudC53ZWJzb2NrZXQub24oJ3VybCcsIGV2ZW50ID0+IHsNCiAgICAgICAgaWYgKCdfX3V2JHVybCcgaW4gZXZlbnQudGhhdCkgew0KICAgICAgICAgICAgZXZlbnQuZGF0YS52YWx1ZSA9IGV2ZW50LnRoYXQuX191diR1cmw7DQogICAgICAgIH07DQogICAgfSk7DQoNCiAgICBjbGllbnQud2Vic29ja2V0Lm9uKCdwcm90b2NvbCcsIGV2ZW50ID0+IHsNCiAgICAgICAgaWYgKCdfX3V2JHByb3RvY29sJyBpbiBldmVudC50aGF0KSB7DQogICAgICAgICAgICBldmVudC5kYXRhLnZhbHVlID0gZXZlbnQudGhhdC5fX3V2JHByb3RvY29sOw0KICAgICAgICB9Ow0KICAgIH0pOw0KDQogICAgY2xpZW50LmZ1bmN0aW9uLm9uKCdmdW5jdGlvbicsIGV2ZW50ID0+IHsNCiAgICAgICAgZXZlbnQuZGF0YS5zY3JpcHQgPSBfX3V2LnJld3JpdGVKUyhldmVudC5kYXRhLnNjcmlwdCk7DQogICAgfSk7DQoNCiAgICBjbGllbnQuZnVuY3Rpb24ub24oJ3RvU3RyaW5nJywgZXZlbnQgPT4gew0KICAgICAgICBpZiAoX191di5tZXRob2RzLnN0cmluZyBpbiBldmVudC50aGF0KSBldmVudC5yZXNwb25kV2l0aChldmVudC50aGF0W19fdXYubWV0aG9kcy5zdHJpbmddKTsNCiAgICB9KTsNCg0KICAgIGNsaWVudC5vYmplY3Qub24oJ2dldE93blByb3BlcnR5TmFtZXMnLCBldmVudCA9PiB7DQogICAgICAgIGV2ZW50LmRhdGEubmFtZXMgPSBldmVudC5kYXRhLm5hbWVzLmZpbHRlcihlbGVtZW50ID0+ICEoX191di5maWx0ZXJLZXlzLmluY2x1ZGVzKGVsZW1lbnQpKSk7DQogICAgfSk7DQoNCiAgICBjbGllbnQub2JqZWN0Lm9uKCdnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzJywgZXZlbnQgPT4gew0KICAgICAgICBmb3IgKGNvbnN0IGZvcmJpZGRlbiBvZiBfX3V2LmZpbHRlcktleXMpIHsNCiAgICAgICAgICAgIGRlbGV0ZSBldmVudC5kYXRhLmRlc2NyaXB0b3JzW2ZvcmJpZGRlbl07DQogICAgICAgIH07DQoNCiAgICB9KTsNCg0KICAgIGNsaWVudC5zdHlsZS5vbignc2V0UHJvcGVydHknLCBldmVudCA9PiB7DQogICAgICAgIGlmIChjbGllbnQuc3R5bGUuZGFzaGVkVXJsUHJvcHMuaW5jbHVkZXMoZXZlbnQuZGF0YS5wcm9wZXJ0eSkpIHsNCiAgICAgICAgICAgIGV2ZW50LmRhdGEudmFsdWUgPSBfX3V2LnJld3JpdGVDU1MoZXZlbnQuZGF0YS52YWx1ZSwgew0KICAgICAgICAgICAgICAgIGNvbnRleHQ6ICd2YWx1ZScsDQogICAgICAgICAgICAgICAgLi4uX191di5tZXRhDQogICAgICAgICAgICB9KQ0KICAgICAgICB9Ow0KICAgIH0pOw0KDQogICAgY2xpZW50LnN0eWxlLm9uKCdnZXRQcm9wZXJ0eVZhbHVlJywgZXZlbnQgPT4gew0KICAgICAgICBpZiAoY2xpZW50LnN0eWxlLmRhc2hlZFVybFByb3BzLmluY2x1ZGVzKGV2ZW50LmRhdGEucHJvcGVydHkpKSB7DQogICAgICAgICAgICBldmVudC5yZXNwb25kV2l0aCgNCiAgICAgICAgICAgICAgICBfX3V2LnNvdXJjZUNTUygNCiAgICAgICAgICAgICAgICAgICAgZXZlbnQudGFyZ2V0LmNhbGwoZXZlbnQudGhhdCwgZXZlbnQuZGF0YS5wcm9wZXJ0eSksDQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQ6ICd2YWx1ZScsDQogICAgICAgICAgICAgICAgICAgICAgICAuLi5fX3V2Lm1ldGENCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICkNCiAgICAgICAgICAgICk7DQogICAgICAgIH07DQogICAgfSk7DQoNCiAgICBpZiAoJ0NTUzJQcm9wZXJ0aWVzJyBpbiB3aW5kb3cpIHsNCiAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgY2xpZW50LnN0eWxlLnVybFByb3BzKSB7DQogICAgICAgICAgICBjbGllbnQub3ZlcnJpZGVEZXNjcmlwdG9yKHdpbmRvdy5DU1MyUHJvcGVydGllcy5wcm90b3R5cGUsIGtleSwgew0KICAgICAgICAgICAgICAgIGdldDogKHRhcmdldCwgdGhhdCkgPT4gew0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gX191di5zb3VyY2VDU1MoDQogICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQuY2FsbCh0aGF0KSwNCiAgICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0OiAndmFsdWUnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLl9fdXYubWV0YQ0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICApDQogICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICBzZXQ6ICh0YXJnZXQsIHRoYXQsIHZhbCkgPT4gew0KICAgICAgICAgICAgICAgICAgICB0YXJnZXQuY2FsbCgNCiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQsDQogICAgICAgICAgICAgICAgICAgICAgICBfX3V2LnJld3JpdGVDU1ModmFsLCB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dDogJ3ZhbHVlJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5fX3V2Lm1ldGENCiAgICAgICAgICAgICAgICAgICAgICAgIH0pDQogICAgICAgICAgICAgICAgICAgICk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSk7DQogICAgICAgIH07DQogICAgfSBlbHNlIGlmICgnSFRNTEVsZW1lbnQnIGluIHdpbmRvdykgew0KDQogICAgICAgIGNsaWVudC5vdmVycmlkZURlc2NyaXB0b3IoDQogICAgICAgICAgICB3aW5kb3cuSFRNTEVsZW1lbnQucHJvdG90eXBlLA0KICAgICAgICAgICAgJ3N0eWxlJywNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBnZXQ6ICh0YXJnZXQsIHRoYXQpID0+IHsNCiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSB0YXJnZXQuY2FsbCh0aGF0KTsNCiAgICAgICAgICAgICAgICAgICAgaWYgKCF2YWx1ZVttZXRob2RQcmVmaXggKyAnbW9kaWZpZWRTdHlsZSddKSB7DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IG9mIGNsaWVudC5zdHlsZS51cmxQcm9wcykgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudC5uYXRpdmVNZXRob2RzLmRlZmluZVByb3BlcnR5KHZhbHVlLCBrZXksIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXQoKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGNsaWVudC5zdHlsZS5nZXRQcm9wZXJ0eVZhbHVlLmNhbGwodGhpcywga2V5KSB8fCAnJzsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfX3V2LnNvdXJjZUNTUygNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQ6ICd2YWx1ZScsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLl9fdXYubWV0YQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0KHZhbCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50LnN0eWxlLnNldFByb3BlcnR5LmNhbGwodGhpcywgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGNsaWVudC5zdHlsZS5wcm9wVG9EYXNoZWRba2V5XSB8fCBrZXkpLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9fdXYucmV3cml0ZUNTUyh2YWwsIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dDogJ3ZhbHVlJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uX191di5tZXRhDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGllbnQubmF0aXZlTWV0aG9kcy5kZWZpbmVQcm9wZXJ0eSh2YWx1ZSwgbWV0aG9kUHJlZml4ICsgJ21vZGlmaWVkU3R5bGUnLCB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdHJ1ZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgKTsNCiAgICB9Ow0KDQogICAgY2xpZW50LnN0eWxlLm9uKCdzZXRDc3NUZXh0JywgZXZlbnQgPT4gew0KICAgICAgICBldmVudC5kYXRhLnZhbHVlID0gX191di5yZXdyaXRlQ1NTKGV2ZW50LmRhdGEudmFsdWUsIHsNCiAgICAgICAgICAgIGNvbnRleHQ6ICdkZWNsYXJhdGlvbkxpc3QnLA0KICAgICAgICAgICAgLi4uX191di5tZXRhDQogICAgICAgIH0pOw0KICAgIH0pOw0KDQogICAgY2xpZW50LnN0eWxlLm9uKCdnZXRDc3NUZXh0JywgZXZlbnQgPT4gew0KICAgICAgICBldmVudC5kYXRhLnZhbHVlID0gX191di5zb3VyY2VDU1MoZXZlbnQuZGF0YS52YWx1ZSwgew0KICAgICAgICAgICAgY29udGV4dDogJ2RlY2xhcmF0aW9uTGlzdCcsDQogICAgICAgICAgICAuLi5fX3V2Lm1ldGENCiAgICAgICAgfSk7DQogICAgfSk7DQoNCiAgICAvLyBQcm9wZXIgaGFzaCBlbXVsYXRpb24uDQogICAgaWYgKCEhd2luZG93LndpbmRvdykgew0KICAgICAgICBfX3V2LmFkZEV2ZW50TGlzdGVuZXIuY2FsbCh3aW5kb3csICdoYXNoY2hhbmdlJywgZXZlbnQgPT4gew0KICAgICAgICAgICAgaWYgKGV2ZW50Ll9fdXYkZGlzcGF0Y2hlZCkgcmV0dXJuIGZhbHNlOw0KICAgICAgICAgICAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7DQogICAgICAgICAgICBjb25zdCBoYXNoID0gd2luZG93LmxvY2F0aW9uLmhhc2g7DQogICAgICAgICAgICBjbGllbnQuaGlzdG9yeS5yZXBsYWNlU3RhdGUuY2FsbCh3aW5kb3cuaGlzdG9yeSwgJycsICcnLCBldmVudC5vbGRVUkwpOw0KICAgICAgICAgICAgX191di5sb2NhdGlvbi5oYXNoID0gaGFzaDsNCiAgICAgICAgfSk7DQogICAgfTsNCg0KICAgIGNsaWVudC5sb2NhdGlvbi5vbignaGFzaGNoYW5nZScsIChvbGRVcmwsIG5ld1VybCwgY3R4KSA9PiB7DQogICAgICAgIGlmIChjdHguSGFzaENoYW5nZUV2ZW50ICYmIGNsaWVudC5oaXN0b3J5LnJlcGxhY2VTdGF0ZSkgew0KICAgICAgICAgICAgY2xpZW50Lmhpc3RvcnkucmVwbGFjZVN0YXRlLmNhbGwod2luZG93Lmhpc3RvcnksICcnLCAnJywgX191di5yZXdyaXRlVXJsKG5ld1VybCkpOw0KDQogICAgICAgICAgICBjb25zdCBldmVudCA9IG5ldyBjdHguSGFzaENoYW5nZUV2ZW50KCdoYXNoY2hhbmdlJywgeyBuZXdVUkw6IG5ld1VybCwgb2xkVVJMOiBvbGRVcmwgfSk7DQoNCiAgICAgICAgICAgIGNsaWVudC5uYXRpdmVNZXRob2RzLmRlZmluZVByb3BlcnR5KGV2ZW50LCBtZXRob2RQcmVmaXggKyAnZGlzcGF0Y2hlZCcsIHsNCiAgICAgICAgICAgICAgICB2YWx1ZTogdHJ1ZSwNCiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSwNCiAgICAgICAgICAgIH0pOyANCg0KICAgICAgICAgICAgX191di5kaXNwYXRjaEV2ZW50LmNhbGwod2luZG93LCBldmVudCk7DQogICAgICAgIH07DQogICAgfSk7DQoNCiAgICAvLyBIb29raW5nIGZ1bmN0aW9ucyAmIGRlc2NyaXB0b3JzDQogICAgY2xpZW50LmZldGNoLm92ZXJyaWRlUmVxdWVzdCgpOw0KICAgIGNsaWVudC5mZXRjaC5vdmVycmlkZVVybCgpOw0KICAgIGNsaWVudC54aHIub3ZlcnJpZGVPcGVuKCk7DQogICAgY2xpZW50Lnhoci5vdmVycmlkZVJlc3BvbnNlVXJsKCk7DQogICAgY2xpZW50LmVsZW1lbnQub3ZlcnJpZGVIdG1sKCk7DQogICAgY2xpZW50LmVsZW1lbnQub3ZlcnJpZGVBdHRyaWJ1dGUoKTsNCiAgICBjbGllbnQuZWxlbWVudC5vdmVycmlkZUluc2VydEFkamFjZW50SFRNTCgpOw0KICAgIGNsaWVudC5lbGVtZW50Lm92ZXJyaWRlQXVkaW8oKTsNCiAgICAvLyBjbGllbnQuZWxlbWVudC5vdmVycmlkZVF1ZXJ5U2VsZWN0b3IoKTsNCiAgICBjbGllbnQubm9kZS5vdmVycmlkZUJhc2VVUkkoKTsNCiAgICBjbGllbnQubm9kZS5vdmVycmlkZVRleHRDb250ZW50KCk7DQogICAgY2xpZW50LmF0dHJpYnV0ZS5vdmVycmlkZU5hbWVWYWx1ZSgpOw0KICAgIGNsaWVudC5kb2N1bWVudC5vdmVycmlkZURvbWFpbigpOw0KICAgIGNsaWVudC5kb2N1bWVudC5vdmVycmlkZVVSTCgpOw0KICAgIGNsaWVudC5kb2N1bWVudC5vdmVycmlkZURvY3VtZW50VVJJKCk7DQogICAgY2xpZW50LmRvY3VtZW50Lm92ZXJyaWRlV3JpdGUoKTsNCiAgICBjbGllbnQuZG9jdW1lbnQub3ZlcnJpZGVSZWZlcnJlcigpOw0KICAgIGNsaWVudC5kb2N1bWVudC5vdmVycmlkZVBhcnNlRnJvbVN0cmluZygpOw0KICAgIGNsaWVudC5zdG9yYWdlLm92ZXJyaWRlTWV0aG9kcygpOw0KICAgIGNsaWVudC5zdG9yYWdlLm92ZXJyaWRlTGVuZ3RoKCk7DQogICAgLy9jbGllbnQuZG9jdW1lbnQub3ZlcnJpZGVRdWVyeVNlbGVjdG9yKCk7DQogICAgY2xpZW50Lm9iamVjdC5vdmVycmlkZUdldFByb3BlcnR5TmFtZXMoKTsNCiAgICBjbGllbnQub2JqZWN0Lm92ZXJyaWRlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycygpOw0KICAgIGNsaWVudC5oaXN0b3J5Lm92ZXJyaWRlUHVzaFN0YXRlKCk7DQogICAgY2xpZW50Lmhpc3Rvcnkub3ZlcnJpZGVSZXBsYWNlU3RhdGUoKTsNCiAgICBjbGllbnQuZXZlbnRTb3VyY2Uub3ZlcnJpZGVDb25zdHJ1Y3QoKTsNCiAgICBjbGllbnQuZXZlbnRTb3VyY2Uub3ZlcnJpZGVVcmwoKTsNCiAgICBjbGllbnQud2Vic29ja2V0Lm92ZXJyaWRlV2ViU29ja2V0KCk7DQogICAgY2xpZW50LndlYnNvY2tldC5vdmVycmlkZVByb3RvY29sKCk7DQogICAgY2xpZW50LndlYnNvY2tldC5vdmVycmlkZVVybCgpOw0KICAgIGNsaWVudC51cmwub3ZlcnJpZGVPYmplY3RVUkwoKTsNCiAgICBjbGllbnQuZG9jdW1lbnQub3ZlcnJpZGVDb29raWUoKTsNCiAgICBjbGllbnQubWVzc2FnZS5vdmVycmlkZVBvc3RNZXNzYWdlKCk7DQogICAgY2xpZW50Lm1lc3NhZ2Uub3ZlcnJpZGVNZXNzYWdlT3JpZ2luKCk7DQogICAgY2xpZW50Lm1lc3NhZ2Uub3ZlcnJpZGVNZXNzYWdlRGF0YSgpOw0KICAgIGNsaWVudC53b3JrZXJzLm92ZXJyaWRlV29ya2VyKCk7DQogICAgY2xpZW50LndvcmtlcnMub3ZlcnJpZGVBZGRNb2R1bGUoKTsNCiAgICBjbGllbnQud29ya2Vycy5vdmVycmlkZUltcG9ydFNjcmlwdHMoKTsNCiAgICBjbGllbnQud29ya2Vycy5vdmVycmlkZVBvc3RNZXNzYWdlKCk7DQogICAgY2xpZW50LnN0eWxlLm92ZXJyaWRlU2V0R2V0UHJvcGVydHkoKTsNCiAgICBjbGllbnQuc3R5bGUub3ZlcnJpZGVDc3NUZXh0KCk7DQogICAgY2xpZW50Lm5hdmlnYXRvci5vdmVycmlkZVNlbmRCZWFjb24oKTsNCiAgICBjbGllbnQuZnVuY3Rpb24ub3ZlcnJpZGVGdW5jdGlvbigpOw0KICAgIGNsaWVudC5mdW5jdGlvbi5vdmVycmlkZVRvU3RyaW5nKCk7DQogICAgY2xpZW50LmxvY2F0aW9uLm92ZXJyaWRlV29ya2VyTG9jYXRpb24oDQogICAgICAgIChocmVmKSA9PiB7DQogICAgICAgICAgICByZXR1cm4gbmV3IFVSTChfX3V2LnNvdXJjZVVybChocmVmKSk7DQogICAgICAgIH0NCiAgICApOw0KDQogICAgY2xpZW50Lm92ZXJyaWRlRGVzY3JpcHRvcih3aW5kb3csICdsb2NhbFN0b3JhZ2UnLCB7DQogICAgICAgIGdldDogKHRhcmdldCwgdGhhdCkgPT4gew0KICAgICAgICAgICAgcmV0dXJuICh0aGF0IHx8IHdpbmRvdykuX191di5sc1dyYXA7DQogICAgICAgIH0sDQogICAgfSk7DQogICAgY2xpZW50Lm92ZXJyaWRlRGVzY3JpcHRvcih3aW5kb3csICdzZXNzaW9uU3RvcmFnZScsIHsNCiAgICAgICAgZ2V0OiAodGFyZ2V0LCB0aGF0KSA9PiB7DQogICAgICAgICAgICByZXR1cm4gKHRoYXQgfHwgd2luZG93KS5fX3V2LnNzV3JhcDsNCiAgICAgICAgfSwNCiAgICB9KTsNCg0KDQogICAgY2xpZW50Lm92ZXJyaWRlKHdpbmRvdywgJ29wZW4nLCAodGFyZ2V0LCB0aGF0LCBhcmdzKSA9PiB7DQogICAgICAgIGlmICghYXJncy5sZW5ndGgpIHJldHVybiB0YXJnZXQuYXBwbHkodGhhdCwgYXJncyk7DQogICAgICAgIGxldCBbdXJsXSA9IGFyZ3M7DQoNCiAgICAgICAgdXJsID0gX191di5yZXdyaXRlVXJsKHVybCk7DQoNCiAgICAgICAgcmV0dXJuIHRhcmdldC5jYWxsKHRoYXQsIHVybCk7DQogICAgfSk7DQoNCiAgICBfX3V2LiR3cmFwID0gZnVuY3Rpb24obmFtZSkgew0KICAgICAgICBpZiAobmFtZSA9PT0gJ2xvY2F0aW9uJykgcmV0dXJuIF9fdXYubWV0aG9kcy5sb2NhdGlvbjsNCiAgICAgICAgaWYgKG5hbWUgPT09ICdldmFsJykgcmV0dXJuIF9fdXYubWV0aG9kcy5ldmFsOw0KICAgICAgICByZXR1cm4gbmFtZTsNCiAgICB9Ow0KDQoNCiAgICBfX3V2LiRnZXQgPSBmdW5jdGlvbih0aGF0KSB7DQogICAgICAgIGlmICh0aGF0ID09PSB3aW5kb3cubG9jYXRpb24pIHJldHVybiBfX3V2LmxvY2F0aW9uOw0KICAgICAgICBpZiAodGhhdCA9PT0gd2luZG93LmV2YWwpIHJldHVybiBfX3V2LmV2YWw7DQogICAgICAgIGlmICh0aGF0ID09PSB3aW5kb3cucGFyZW50KSB7DQogICAgICAgICAgICByZXR1cm4gd2luZG93Ll9fdXYkcGFyZW50Ow0KICAgICAgICB9Ow0KICAgICAgICBpZiAodGhhdCA9PT0gd2luZG93LnRvcCkgew0KICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5fX3V2JHRvcDsNCiAgICAgICAgfTsNCiAgICAgICAgcmV0dXJuIHRoYXQ7DQogICAgfTsNCg0KICAgIF9fdXYuZXZhbCA9IGNsaWVudC53cmFwKHdpbmRvdywgJ2V2YWwnLCAodGFyZ2V0LCB0aGF0LCBhcmdzKSA9PiB7DQogICAgICAgIGlmICghYXJncy5sZW5ndGggfHwgdHlwZW9mIGFyZ3NbMF0gIT09ICdzdHJpbmcnKSByZXR1cm4gdGFyZ2V0LmFwcGx5KHRoYXQsIGFyZ3MpOw0KICAgICAgICBsZXQgW3NjcmlwdF0gPSBhcmdzOw0KDQogICAgICAgIHNjcmlwdCA9IF9fdXYucmV3cml0ZUpTKHNjcmlwdCk7DQogICAgICAgIHJldHVybiB0YXJnZXQuY2FsbCh0aGF0LCBzY3JpcHQpOw0KICAgIH0pOw0KDQogICAgX191di5jYWxsID0gZnVuY3Rpb24odGFyZ2V0LCBhcmdzLCB0aGF0KSB7DQogICAgICAgIHJldHVybiB0aGF0ID8gdGFyZ2V0LmFwcGx5KHRoYXQsIGFyZ3MpIDogdGFyZ2V0KC4uLmFyZ3MpOw0KICAgIH07DQoNCiAgICBfX3V2LmNhbGwkID0gZnVuY3Rpb24ob2JqLCBwcm9wLCBhcmdzID0gW10pIHsNCiAgICAgICAgcmV0dXJuIG9ialtwcm9wXS5hcHBseShvYmosIGFyZ3MpOw0KICAgIH07DQoNCiAgICBjbGllbnQubmF0aXZlTWV0aG9kcy5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuT2JqZWN0LnByb3RvdHlwZSwgbWFzdGVyLCB7DQogICAgICAgIGdldDogKCkgPT4gew0KICAgICAgICAgICAgcmV0dXJuIF9fdXY7DQogICAgICAgIH0sDQogICAgICAgIGVudW1lcmFibGU6IGZhbHNlDQogICAgfSk7DQoNCiAgICBjbGllbnQubmF0aXZlTWV0aG9kcy5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuT2JqZWN0LnByb3RvdHlwZSwgX191di5tZXRob2RzLnNldFNvdXJjZSwgew0KICAgICAgICB2YWx1ZTogZnVuY3Rpb24oc291cmNlKSB7DQogICAgICAgICAgICBpZiAoIWNsaWVudC5uYXRpdmVNZXRob2RzLmlzRXh0ZW5zaWJsZSh0aGlzKSkgcmV0dXJuIHRoaXM7DQoNCiAgICAgICAgICAgIGNsaWVudC5uYXRpdmVNZXRob2RzLmRlZmluZVByb3BlcnR5KHRoaXMsIF9fdXYubWV0aG9kcy5zb3VyY2UsIHsNCiAgICAgICAgICAgICAgICB2YWx1ZTogc291cmNlLA0KICAgICAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLA0KICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlDQogICAgICAgICAgICB9KTsNCg0KICAgICAgICAgICAgcmV0dXJuIHRoaXM7DQogICAgICAgIH0sDQogICAgICAgIGVudW1lcmFibGU6IGZhbHNlLA0KICAgIH0pOw0KDQogICAgY2xpZW50Lm5hdGl2ZU1ldGhvZHMuZGVmaW5lUHJvcGVydHkod2luZG93Lk9iamVjdC5wcm90b3R5cGUsIF9fdXYubWV0aG9kcy5zb3VyY2UsIHsNCiAgICAgICAgdmFsdWU6IF9fdXYsDQogICAgICAgIHdyaXRhYmxlOiB0cnVlLA0KICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZQ0KICAgIH0pOw0KDQogICAgY2xpZW50Lm5hdGl2ZU1ldGhvZHMuZGVmaW5lUHJvcGVydHkod2luZG93Lk9iamVjdC5wcm90b3R5cGUsIF9fdXYubWV0aG9kcy5sb2NhdGlvbiwgew0KICAgICAgICBjb25maWd1cmFibGU6IHRydWUsDQogICAgICAgIGdldCgpIHsNCiAgICAgICAgICAgIHJldHVybiAodGhpcyA9PT0gd2luZG93LmRvY3VtZW50IHx8IHRoaXMgPT09IHdpbmRvdykgPyBfX3V2LmxvY2F0aW9uIDogdGhpcy5sb2NhdGlvbjsNCiAgICAgICAgfSwNCiAgICAgICAgc2V0KHZhbCkgew0KICAgICAgICAgICAgaWYgKHRoaXMgPT09IHdpbmRvdy5kb2N1bWVudCB8fCB0aGlzID09PSB3aW5kb3cpIHsNCiAgICAgICAgICAgICAgICBfX3V2LmxvY2F0aW9uLmhyZWYgPSB2YWw7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIHRoaXMubG9jYXRpb24gPSB2YWw7DQogICAgICAgICAgICB9Ow0KICAgICAgICB9LA0KICAgIH0pOw0KDQogICAgY2xpZW50Lm5hdGl2ZU1ldGhvZHMuZGVmaW5lUHJvcGVydHkod2luZG93Lk9iamVjdC5wcm90b3R5cGUsIF9fdXYubWV0aG9kcy5wYXJlbnQsIHsNCiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLA0KICAgICAgICBnZXQoKSB7DQogICAgICAgICAgICBjb25zdCB2YWwgPSB0aGlzLnBhcmVudDsNCg0KICAgICAgICAgICAgaWYgKHRoaXMgPT09IHdpbmRvdykgew0KICAgICAgICAgICAgICAgIHRyeSB7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiAnX191dicgaW4gdmFsID8gdmFsIDogdGhpczsNCiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOw0KICAgICAgICAgICAgICAgIH07DQogICAgICAgICAgICB9Ow0KICAgICAgICAgICAgcmV0dXJuIHZhbDsNCiAgICAgICAgfSwNCiAgICAgICAgc2V0KHZhbCkgew0KICAgICAgICAgICAgdGhpcy5wYXJlbnQgPSB2YWw7DQogICAgICAgIH0sDQogICAgfSk7DQoNCiAgICBjbGllbnQubmF0aXZlTWV0aG9kcy5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuT2JqZWN0LnByb3RvdHlwZSwgX191di5tZXRob2RzLnRvcCwgew0KICAgICAgICBjb25maWd1cmFibGU6IHRydWUsDQogICAgICAgIGdldCgpIHsNCiAgICAgICAgICAgIGNvbnN0IHZhbCA9IHRoaXMudG9wOw0KDQogICAgICAgICAgICBpZiAodGhpcyA9PT0gd2luZG93KSB7DQogICAgICAgICAgICAgICAgaWYgKHZhbCA9PT0gdGhpcy5wYXJlbnQpIHJldHVybiB0aGlzW19fdXYubWV0aG9kcy5wYXJlbnRdOw0KICAgICAgICAgICAgICAgIHRyeSB7DQogICAgICAgICAgICAgICAgICAgIGlmICghKCdfX3V2JyBpbiB2YWwpKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBsZXQgY3VycmVudCA9IHRoaXM7DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChjdXJyZW50LnBhcmVudCAhPT0gdmFsKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQucGFyZW50DQogICAgICAgICAgICAgICAgICAgICAgICB9Ow0KDQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ19fdXYnIGluIGN1cnJlbnQgPyBjdXJyZW50IDogdGhpczsNCg0KICAgICAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbDsNCiAgICAgICAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOw0KICAgICAgICAgICAgICAgIH07DQogICAgICAgICAgICB9Ow0KICAgICAgICAgICAgcmV0dXJuIHZhbDsNCiAgICAgICAgfSwNCiAgICAgICAgc2V0KHZhbCkgew0KICAgICAgICAgICAgdGhpcy50b3AgPSB2YWw7DQogICAgICAgIH0sDQogICAgfSk7DQoNCg0KICAgIGNsaWVudC5uYXRpdmVNZXRob2RzLmRlZmluZVByb3BlcnR5KHdpbmRvdy5PYmplY3QucHJvdG90eXBlLCBfX3V2Lm1ldGhvZHMuZXZhbCwgew0KICAgICAgICBjb25maWd1cmFibGU6IHRydWUsDQogICAgICAgIGdldCgpIHsNCiAgICAgICAgICAgIHJldHVybiB0aGlzID09PSB3aW5kb3cgPyBfX3V2LmV2YWwgOiB0aGlzLmV2YWw7DQogICAgICAgIH0sDQogICAgICAgIHNldCh2YWwpIHsNCiAgICAgICAgICAgIHRoaXMuZXZhbCA9IHZhbDsNCiAgICAgICAgfSwNCiAgICB9KTsNCn07"));
